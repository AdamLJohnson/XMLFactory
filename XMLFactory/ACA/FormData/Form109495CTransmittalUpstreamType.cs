
/****************************************************************************  

    Save this comment ---- instructions on how to build this file.
    this is file is created from the tool xsd2code++ it's available as a VS addin.  It gets installed by default in 
         C:\Program Files (x86)\Xsd2Code\xsd2code.exe
   
    The xsd file used to generate this code is the following in TFS
        main\viewpoint\clientside\pr\prcommon\xmlfactory\aca\TaxYear\Schemas\ACA AIR-IEP TY2016 XML LIBRARY 8.7 v1.0\MSG\IRS-ACAUserInterfaceHeaderMessage.xsd
    
    open command window in this directory on your local box
        main\viewpoint\clientside\pr\prcommon\xmlfactory\aca\TaxYear\Schemas\ACA AIR-IEP TY2016 XML LIBRARY 8.7 v1.0\MSG
    
    run this command changing xsd and cs filenames as needed
    "C:\Program Files (x86)\Xsd2Code\xsd2code.exe"  .\IRS-Form1094-1095CTransmitterUpstreamMessage.xsd VCS.Viewpoint.XmlFactory.PR.ACA.FormData.TaxYear IRS-Form1094-1095CTransmitterUpstreamMessage.cs /lic .\xsd2code.license /p Net45 /dmnOnlyIfDiff /dmxmli+ /if+ /uct+ /is /xml /encUTF8 /in+ /sm Serialize /dm Deserialize /sf SaveToFile /lf LoadFromFile /expattg /appinfo+ /sc+ /rt+ /rtrange /rtregex /rtstlength /pfnu /xa+ /xao+

    Copy and paste output from IRS-ACAUserInterfaceHeaderMessage.cs and paste below starting at the next comment block
    
    make the following manual changes
        Class                                   Action
        Form109495CTransmittalUpstreamType      needs to implement IRootXmlClass
        OfferCoverageByMonthType                change private and public methods for _mmmOfferCd to strings 
                                                comment out ShouldSerializeMMMOfferCd

        MonthlySafeHarborCdType                 change private and public methods for _mmmSafeHarborCd to strings 
                                                comment out ShouldSerializeMmmSafeHarborCd defined in another file  
                                                               
        AmountByMonthDetailType                 privates and public _monthAmount need to change to strings
                                                comment out 
                                                ShouldSerializeMmmSafeHarborCd

        MonthIndGrpType                         comment out 
                                                ShouldSerializeMonthInd

        Form1094CUpstreamDetailType             comment out 
                                                ShouldSerializeAuthoritativeTransmittalInd
                                                ShouldSerializeAggregatedGroupMemberCd
                                                ShouldSerializeQualifyingOfferMethodIndDigitCodeType
                                                ShouldSerializeSection4980HReliefInd
                                                ShouldSerializeNinetyEightPctOfferMethodInd

        EmployeeOfferAndCoverageGrpType         _birthDt changed to string
                                                comment out
                                                ShouldSerializeCoveredIndividualAnnualInd

        ALEMemberMonthlyInfoGrpType             comment out
                                                ShouldSerializeMinEssentialCvrOffrCd
                                                ShouldSerializeAggregatedGroupInd
                                                ShouldSerializeALESect4980HTrnstReliefCd    
        Enums - comment out defined in another class
            
            DigitCodeType
            DigitBooleanType

*************************************************************************************/


// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//    <NameSpace>XMLFactory.ACA.FormData.Generated</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>True</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>True</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>True</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>True</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace XMLFactory.ACA.FormData
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;
    using XMLFactory.Interfaces;


    /// <summary>
    /// Form109495C Transmission Upstream Type112014-11-05Initial VersionTransmission type for 1094C forms upstream data generated EOY report
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:msg:form1094-1095Ctransmitterupstreammessage")]
    [System.Xml.Serialization.XmlRootAttribute("Form109495CTransmittalUpstream", Namespace="urn:us:gov:treasury:irs:msg:form1094-1095Ctransmitterupstreammessage", IsNullable=false)]
    public partial class Form109495CTransmittalUpstreamType : IRootXmlClass
    {
        
        private List<Form1094CUpstreamDetailType> _form1094CUpstreamDetail;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// Form109495CTransmittalUpstreamType class constructor
        /// </summary>
        public Form109495CTransmittalUpstreamType()
        {
            this._form1094CUpstreamDetail = new List<Form1094CUpstreamDetailType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Form1094CUpstreamDetail", Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
        public List<Form1094CUpstreamDetailType> Form1094CUpstreamDetail
        {
            get
            {
                return this._form1094CUpstreamDetail;
            }
            set
            {
                this._form1094CUpstreamDetail = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Form109495CTransmittalUpstreamType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Form109495CTransmittalUpstreamType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Form109495CTransmittalUpstreamType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Form109495CTransmittalUpstreamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Form109495CTransmittalUpstreamType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form109495CTransmittalUpstreamType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Form109495CTransmittalUpstreamType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Form109495CTransmittalUpstreamType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Form109495CTransmittalUpstreamType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Form109495CTransmittalUpstreamType Deserialize(System.IO.Stream s)
        {
            return ((Form109495CTransmittalUpstreamType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Form109495CTransmittalUpstreamType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Form109495CTransmittalUpstreamType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Form109495CTransmittalUpstreamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Form109495CTransmittalUpstreamType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form109495CTransmittalUpstreamType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Form109495CTransmittalUpstreamType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Form109495CTransmittalUpstreamType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Form109495CTransmittalUpstreamType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static Form109495CTransmittalUpstreamType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Form 1094-C Upstream Detail Type102015-01-27Initial versionForm 1094-C - Transmittal of Employer-Provided Health Insurance Offer and Coverage
    /// Information Returns
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class Form1094CUpstreamDetailType
    {
        
        private string _submissionId;
        
        private string _originalUniqueSubmissionId;
        
        private string _testScenarioId;
        
        private string _taxYr;
        
        private DigitBooleanType _correctedInd;
        
        private CorrectedSubmissionInfoGrpType _correctedSubmissionInfoGrp;
        
        private EmployerInformationGrpType _employerInformationGrp;
        
        private GovtEntityEmployerInfoGrpType _govtEntityEmployerInfoGrp;
        
        private string _form1095CAttachedCnt;
        
        private DigitBooleanType _authoritativeTransmittalInd;
        
        private string _totalForm1095CALEMemberCnt;
        
        private DigitCodeType _aggregatedGroupMemberCd;
        
        private DigitBooleanType _qualifyingOfferMethodInd;
        
        private DigitBooleanType _section4980HReliefInd;
        
        private DigitBooleanType _ninetyEightPctOfferMethodInd;
        
        private string _juratSignaturePIN;
        
        private string _personTitleTxt;

        private string _signatureDt;

        private ALEMemberInformationGrpType _aLEMemberInformationGrp;
        
        private List<OtherALEMembersType> _otherALEMembersGrp;
        
        private List<Form1095CUpstreamDetailType> _form1095CUpstreamDetail;
        
        private string _recordType;
        
        private string _lineNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// Form1094CUpstreamDetailType class constructor
        /// </summary>
        public Form1094CUpstreamDetailType()
        {
            this._form1095CUpstreamDetail = new List<Form1095CUpstreamDetailType>();
            this._otherALEMembersGrp = new List<OtherALEMembersType>();
            this._aLEMemberInformationGrp = new ALEMemberInformationGrpType();
            this._govtEntityEmployerInfoGrp = new GovtEntityEmployerInfoGrpType();
            this._employerInformationGrp = new EmployerInformationGrpType();
            this._correctedSubmissionInfoGrp = new CorrectedSubmissionInfoGrpType();
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*")]
        public string SubmissionId
        {
            get
            {
                return this._submissionId;
            }
            set
            {
                this._submissionId = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^\\s].[^\\s]{1,80}\\|[1-9]{1}[0-9]{0,15}")]
        public string OriginalUniqueSubmissionId
        {
            get
            {
                return this._originalUniqueSubmissionId;
            }
            set
            {
                this._originalUniqueSubmissionId = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([1-9]|[1-9][0-9])C{0,1}-([0-9]|[1-9][0-9])")]
        public string TestScenarioId
        {
            get
            {
                return this._testScenarioId;
            }
            set
            {
                this._testScenarioId = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]{3}")]
        public string TaxYr
        {
            get
            {
                return this._taxYr;
            }
            set
            {
                this._taxYr = value;
            }
        }
        
        public DigitBooleanType CorrectedInd
        {
            get
            {
                return this._correctedInd;
            }
            set
            {
                this._correctedInd = value;
            }
        }
        
        public CorrectedSubmissionInfoGrpType CorrectedSubmissionInfoGrp
        {
            get
            {
                return this._correctedSubmissionInfoGrp;
            }
            set
            {
                this._correctedSubmissionInfoGrp = value;
            }
        }
        
        public EmployerInformationGrpType EmployerInformationGrp
        {
            get
            {
                return this._employerInformationGrp;
            }
            set
            {
                this._employerInformationGrp = value;
            }
        }
        
        public GovtEntityEmployerInfoGrpType GovtEntityEmployerInfoGrp
        {
            get
            {
                return this._govtEntityEmployerInfoGrp;
            }
            set
            {
                this._govtEntityEmployerInfoGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string Form1095CAttachedCnt
        {
            get
            {
                return this._form1095CAttachedCnt;
            }
            set
            {
                this._form1095CAttachedCnt = value;
            }
        }
        
        public DigitBooleanType AuthoritativeTransmittalInd
        {
            get
            {
                return this._authoritativeTransmittalInd;
            }
            set
            {
                this._authoritativeTransmittalInd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string TotalForm1095CALEMemberCnt
        {
            get
            {
                return this._totalForm1095CALEMemberCnt;
            }
            set
            {
                this._totalForm1095CALEMemberCnt = value;
            }
        }
        
        public DigitCodeType AggregatedGroupMemberCd
        {
            get
            {
                return this._aggregatedGroupMemberCd;
            }
            set
            {
                this._aggregatedGroupMemberCd = value;
            }
        }
        
        public DigitBooleanType QualifyingOfferMethodInd
        {
            get
            {
                return this._qualifyingOfferMethodInd;
            }
            set
            {
                this._qualifyingOfferMethodInd = value;
            }
        }
        
        public DigitBooleanType Section4980HReliefInd
        {
            get
            {
                return this._section4980HReliefInd;
            }
            set
            {
                this._section4980HReliefInd = value;
            }
        }
        
        public DigitBooleanType NinetyEightPctOfferMethodInd
        {
            get
            {
                return this._ninetyEightPctOfferMethodInd;
            }
            set
            {
                this._ninetyEightPctOfferMethodInd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,10}")]
        public string JuratSignaturePIN
        {
            get
            {
                return this._juratSignaturePIN;
            }
            set
            {
                this._juratSignaturePIN = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z\\-] ?)*[A-Za-z\\-]")]
        public string PersonTitleTxt
        {
            get
            {
                return this._personTitleTxt;
            }
            set
            {
                this._personTitleTxt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]{3}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])")]
        public string SignatureDt
        {
            get
            {
                return this._signatureDt;
            }
            set
            {
                this._signatureDt = value;
            }
        }
        
        public ALEMemberInformationGrpType ALEMemberInformationGrp
        {
            get
            {
                return this._aLEMemberInformationGrp;
            }
            set
            {
                this._aLEMemberInformationGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OtherALEMembersGrp")]
        public List<OtherALEMembersType> OtherALEMembersGrp
        {
            get
            {
                return this._otherALEMembersGrp;
            }
            set
            {
                this._otherALEMembersGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Form1095CUpstreamDetail")]
        public List<Form1095CUpstreamDetailType> Form1095CUpstreamDetail
        {
            get
            {
                return this._form1095CUpstreamDetail;
            }
            set
            {
                this._form1095CUpstreamDetail = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string recordType
        {
            get
            {
                return this._recordType;
            }
            set
            {
                this._recordType = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string lineNum
        {
            get
            {
                return this._lineNum;
            }
            set
            {
                this._lineNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Form1094CUpstreamDetailType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Form1094CUpstreamDetailType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Form1094CUpstreamDetailType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Form1094CUpstreamDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Form1094CUpstreamDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form1094CUpstreamDetailType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Form1094CUpstreamDetailType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Form1094CUpstreamDetailType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Form1094CUpstreamDetailType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Form1094CUpstreamDetailType Deserialize(System.IO.Stream s)
        {
            return ((Form1094CUpstreamDetailType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Form1094CUpstreamDetailType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Form1094CUpstreamDetailType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Form1094CUpstreamDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Form1094CUpstreamDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form1094CUpstreamDetailType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Form1094CUpstreamDetailType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Form1094CUpstreamDetailType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Form1094CUpstreamDetailType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static Form1094CUpstreamDetailType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Digit Boolean Type102015-07-14Initial VersionType for digit boolean values. 0= False, 1=True
    /// </summary>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    //public enum DigitBooleanType
    //{
        
    //    [System.Xml.Serialization.XmlEnumAttribute("0")]
    //    Item0,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1")]
    //    Item1,
    //}
    
    /// <summary>
    /// Correction Submission Information Group Type102015-01-27Initial VersionType information to identify the submission (1094-C) being corrected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class CorrectedSubmissionInfoGrpType
    {
        
        private string _correctedUniqueSubmissionId;
        
        private BusinessNameType _correctedSubmissionPayerName;
        
        private string _correctedSubmissionPayerTIN;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// CorrectedSubmissionInfoGrpType class constructor
        /// </summary>
        public CorrectedSubmissionInfoGrpType()
        {
            this._correctedSubmissionPayerName = new BusinessNameType();
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^\\s].[^\\s]{1,80}\\|[1-9]{1}[0-9]{0,15}")]
        public string CorrectedUniqueSubmissionId
        {
            get
            {
                return this._correctedUniqueSubmissionId;
            }
            set
            {
                this._correctedUniqueSubmissionId = value;
            }
        }
        
        public BusinessNameType CorrectedSubmissionPayerName
        {
            get
            {
                return this._correctedSubmissionPayerName;
            }
            set
            {
                this._correctedSubmissionPayerName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string CorrectedSubmissionPayerTIN
        {
            get
            {
                return this._correctedSubmissionPayerTIN;
            }
            set
            {
                this._correctedSubmissionPayerTIN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CorrectedSubmissionInfoGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorrectedSubmissionInfoGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorrectedSubmissionInfoGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorrectedSubmissionInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CorrectedSubmissionInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorrectedSubmissionInfoGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CorrectedSubmissionInfoGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CorrectedSubmissionInfoGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CorrectedSubmissionInfoGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CorrectedSubmissionInfoGrpType Deserialize(System.IO.Stream s)
        {
            return ((CorrectedSubmissionInfoGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CorrectedSubmissionInfoGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorrectedSubmissionInfoGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorrectedSubmissionInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorrectedSubmissionInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorrectedSubmissionInfoGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorrectedSubmissionInfoGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorrectedSubmissionInfoGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorrectedSubmissionInfoGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static CorrectedSubmissionInfoGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Business Name Type102008-01-08EFileTypes, December 14, 2007Type for a Business Name, 2 Name Lines
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class BusinessNameType
    {
        
        private string _businessNameLine1Txt;
        
        private string _businessNameLine2Txt;
        
        private static XmlSerializer serializer;
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(75)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z0-9\\-\\(\\)&\'] ?)*[A-Za-z0-9\\-\\(\\)&\']")]
        public string BusinessNameLine1Txt
        {
            get
            {
                return this._businessNameLine1Txt;
            }
            set
            {
                this._businessNameLine1Txt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(75)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z0-9\\-\\(\\)&\'] ?)*[A-Za-z0-9\\-\\(\\)&\']")]
        public string BusinessNameLine2Txt
        {
            get
            {
                return this._businessNameLine2Txt;
            }
            set
            {
                this._businessNameLine2Txt = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BusinessNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BusinessNameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BusinessNameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BusinessNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BusinessNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessNameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BusinessNameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BusinessNameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BusinessNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BusinessNameType Deserialize(System.IO.Stream s)
        {
            return ((BusinessNameType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BusinessNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BusinessNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BusinessNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BusinessNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessNameType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BusinessNameType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BusinessNameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BusinessNameType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static BusinessNameType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Month Indicator Group Type102015-01-27Initial versionA group which contains indicators for each month of the year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class MonthIndGrpType
    {
        
        private DigitBooleanType _januaryInd;
        
        private DigitBooleanType _februaryInd;
        
        private DigitBooleanType _marchInd;
        
        private DigitBooleanType _aprilInd;
        
        private DigitBooleanType _mayInd;
        
        private DigitBooleanType _juneInd;
        
        private DigitBooleanType _julyInd;
        
        private DigitBooleanType _augustInd;
        
        private DigitBooleanType _septemberInd;
        
        private DigitBooleanType _octoberInd;
        
        private DigitBooleanType _novemberInd;
        
        private DigitBooleanType _decemberInd;
        
        private static XmlSerializer serializer;
        
        public DigitBooleanType JanuaryInd
        {
            get
            {
                return this._januaryInd;
            }
            set
            {
                this._januaryInd = value;
            }
        }
        
        public DigitBooleanType FebruaryInd
        {
            get
            {
                return this._februaryInd;
            }
            set
            {
                this._februaryInd = value;
            }
        }
        
        public DigitBooleanType MarchInd
        {
            get
            {
                return this._marchInd;
            }
            set
            {
                this._marchInd = value;
            }
        }
        
        public DigitBooleanType AprilInd
        {
            get
            {
                return this._aprilInd;
            }
            set
            {
                this._aprilInd = value;
            }
        }
        
        public DigitBooleanType MayInd
        {
            get
            {
                return this._mayInd;
            }
            set
            {
                this._mayInd = value;
            }
        }
        
        public DigitBooleanType JuneInd
        {
            get
            {
                return this._juneInd;
            }
            set
            {
                this._juneInd = value;
            }
        }
        
        public DigitBooleanType JulyInd
        {
            get
            {
                return this._julyInd;
            }
            set
            {
                this._julyInd = value;
            }
        }
        
        public DigitBooleanType AugustInd
        {
            get
            {
                return this._augustInd;
            }
            set
            {
                this._augustInd = value;
            }
        }
        
        public DigitBooleanType SeptemberInd
        {
            get
            {
                return this._septemberInd;
            }
            set
            {
                this._septemberInd = value;
            }
        }
        
        public DigitBooleanType OctoberInd
        {
            get
            {
                return this._octoberInd;
            }
            set
            {
                this._octoberInd = value;
            }
        }
        
        public DigitBooleanType NovemberInd
        {
            get
            {
                return this._novemberInd;
            }
            set
            {
                this._novemberInd = value;
            }
        }
        
        public DigitBooleanType DecemberInd
        {
            get
            {
                return this._decemberInd;
            }
            set
            {
                this._decemberInd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MonthIndGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MonthIndGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MonthIndGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MonthIndGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MonthIndGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MonthIndGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out MonthIndGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static MonthIndGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MonthIndGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static MonthIndGrpType Deserialize(System.IO.Stream s)
        {
            return ((MonthIndGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current MonthIndGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MonthIndGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MonthIndGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out MonthIndGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MonthIndGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MonthIndGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out MonthIndGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MonthIndGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static MonthIndGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Covered Individual Type102015-01-27Initial VersionInformation related to the Covered Individual Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class EmployerCoveredIndividualType
    {
        
        private OtherCompletePersonNameType _coveredIndividualName;
        
        private string _personNameControlTxt;
        
        private TINRequestTypeCodeType _tINRequestTypeCd;
        
        private string _sSN;
        
        private string _birthDt;
        
        private DigitBooleanType _coveredIndividualAnnualInd;
        
        private MonthIndGrpType _coveredIndividualMonthlyIndGrp;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// EmployerCoveredIndividualType class constructor
        /// </summary>
        public EmployerCoveredIndividualType()
        {
            this._coveredIndividualMonthlyIndGrp = new MonthIndGrpType();
            this._coveredIndividualName = new OtherCompletePersonNameType();
        }
        
        public OtherCompletePersonNameType CoveredIndividualName
        {
            get
            {
                return this._coveredIndividualName;
            }
            set
            {
                this._coveredIndividualName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z][A-Z\\- ]{0,3}")]
        public string PersonNameControlTxt
        {
            get
            {
                return this._personNameControlTxt;
            }
            set
            {
                this._personNameControlTxt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        public TINRequestTypeCodeType TINRequestTypeCd
        {
            get
            {
                return this._tINRequestTypeCd;
            }
            set
            {
                this._tINRequestTypeCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string SSN
        {
            get
            {
                return this._sSN;
            }
            set
            {
                this._sSN = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]{3}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])")]
        public string BirthDt
        {
            get
            {
                return this._birthDt;
            }
            set
            {
                this._birthDt = value;
            }
        }
        
        public DigitBooleanType CoveredIndividualAnnualInd
        {
            get
            {
                return this._coveredIndividualAnnualInd;
            }
            set
            {
                this._coveredIndividualAnnualInd = value;
            }
        }
        
        public MonthIndGrpType CoveredIndividualMonthlyIndGrp
        {
            get
            {
                return this._coveredIndividualMonthlyIndGrp;
            }
            set
            {
                this._coveredIndividualMonthlyIndGrp = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EmployerCoveredIndividualType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EmployerCoveredIndividualType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EmployerCoveredIndividualType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EmployerCoveredIndividualType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EmployerCoveredIndividualType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployerCoveredIndividualType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out EmployerCoveredIndividualType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static EmployerCoveredIndividualType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EmployerCoveredIndividualType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static EmployerCoveredIndividualType Deserialize(System.IO.Stream s)
        {
            return ((EmployerCoveredIndividualType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current EmployerCoveredIndividualType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EmployerCoveredIndividualType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EmployerCoveredIndividualType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EmployerCoveredIndividualType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployerCoveredIndividualType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EmployerCoveredIndividualType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EmployerCoveredIndividualType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EmployerCoveredIndividualType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static EmployerCoveredIndividualType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Other Complete Person Name Type10Initial Version2014-06-04YesActiveGlobal type definition for person's full name where all elements are optional.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class OtherCompletePersonNameType
    {
        
        private string _personFirstNm;
        
        private string _personMiddleNm;
        
        private string _personLastNm;
        
        private string _suffixNm;
        
        private static XmlSerializer serializer;
        
        public string PersonFirstNm
        {
            get
            {
                return this._personFirstNm;
            }
            set
            {
                this._personFirstNm = value;
            }
        }
        
        public string PersonMiddleNm
        {
            get
            {
                return this._personMiddleNm;
            }
            set
            {
                this._personMiddleNm = value;
            }
        }
        
        public string PersonLastNm
        {
            get
            {
                return this._personLastNm;
            }
            set
            {
                this._personLastNm = value;
            }
        }
        
        public string SuffixNm
        {
            get
            {
                return this._suffixNm;
            }
            set
            {
                this._suffixNm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OtherCompletePersonNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OtherCompletePersonNameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OtherCompletePersonNameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OtherCompletePersonNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherCompletePersonNameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out OtherCompletePersonNameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static OtherCompletePersonNameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OtherCompletePersonNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static OtherCompletePersonNameType Deserialize(System.IO.Stream s)
        {
            return ((OtherCompletePersonNameType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current OtherCompletePersonNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OtherCompletePersonNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OtherCompletePersonNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherCompletePersonNameType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OtherCompletePersonNameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OtherCompletePersonNameType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static OtherCompletePersonNameType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// TIN Request Type Code Type102012-11-01Initial VersionA code type used to identify the TIN request type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:common")]
    public enum TINRequestTypeCodeType
    {
        
        INDIVIDUAL_TIN,
        
        BUSINESS_TIN,
        
        UNKNOWN,
    }
    
    /// <summary>
    /// Monthly Safe Harbor Cd102015-01-27Initial versionA group for all months
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class MonthlySafeHarborCdType
    {
        
        private string _janSafeHarborCd;
        
        private string _febSafeHarborCd;
        
        private string _marSafeHarborCd;
        
        private string _aprSafeHarborCd;
        
        private string _maySafeHarborCd;
        
        private string _junSafeHarborCd;
        
        private string _julSafeHarborCd;
        
        private string _augSafeHarborCd;
        
        private string _sepSafeHarborCd;
        
        private string _octSafeHarborCd;
        
        private string _novSafeHarborCd;
        
        private string _decSafeHarborCd;
        
        private static XmlSerializer serializer;
        
        public string JanSafeHarborCd
        {
            get
            {
                return this._janSafeHarborCd;
            }
            set
            {
                this._janSafeHarborCd = value;
            }
        }
        
        public string FebSafeHarborCd
        {
            get
            {
                return this._febSafeHarborCd;
            }
            set
            {
                this._febSafeHarborCd = value;
            }
        }
        
        public string MarSafeHarborCd
        {
            get
            {
                return this._marSafeHarborCd;
            }
            set
            {
                this._marSafeHarborCd = value;
            }
        }
        
        public string AprSafeHarborCd
        {
            get
            {
                return this._aprSafeHarborCd;
            }
            set
            {
                this._aprSafeHarborCd = value;
            }
        }
        
        public string MaySafeHarborCd
        {
            get
            {
                return this._maySafeHarborCd;
            }
            set
            {
                this._maySafeHarborCd = value;
            }
        }
        
        public string JunSafeHarborCd
        {
            get
            {
                return this._junSafeHarborCd;
            }
            set
            {
                this._junSafeHarborCd = value;
            }
        }
        
        public string JulSafeHarborCd
        {
            get
            {
                return this._julSafeHarborCd;
            }
            set
            {
                this._julSafeHarborCd = value;
            }
        }
        
        public string AugSafeHarborCd
        {
            get
            {
                return this._augSafeHarborCd;
            }
            set
            {
                this._augSafeHarborCd = value;
            }
        }
        
        public string SepSafeHarborCd
        {
            get
            {
                return this._sepSafeHarborCd;
            }
            set
            {
                this._sepSafeHarborCd = value;
            }
        }
        
        public string OctSafeHarborCd
        {
            get
            {
                return this._octSafeHarborCd;
            }
            set
            {
                this._octSafeHarborCd = value;
            }
        }
        
        public string NovSafeHarborCd
        {
            get
            {
                return this._novSafeHarborCd;
            }
            set
            {
                this._novSafeHarborCd = value;
            }
        }
        
        public string DecSafeHarborCd
        {
            get
            {
                return this._decSafeHarborCd;
            }
            set
            {
                this._decSafeHarborCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MonthlySafeHarborCdType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MonthlySafeHarborCdType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MonthlySafeHarborCdType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MonthlySafeHarborCdType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MonthlySafeHarborCdType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MonthlySafeHarborCdType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out MonthlySafeHarborCdType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static MonthlySafeHarborCdType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MonthlySafeHarborCdType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static MonthlySafeHarborCdType Deserialize(System.IO.Stream s)
        {
            return ((MonthlySafeHarborCdType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current MonthlySafeHarborCdType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MonthlySafeHarborCdType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MonthlySafeHarborCdType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out MonthlySafeHarborCdType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MonthlySafeHarborCdType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MonthlySafeHarborCdType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out MonthlySafeHarborCdType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MonthlySafeHarborCdType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static MonthlySafeHarborCdType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Safe Harbor Indictor Type202016-06-29Initial VersionThe Safe Harbor Code Types.
    /// </summary>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    //public enum SafeHarborCdType
    //{
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2A")]
    //    Item2A,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2B")]
    //    Item2B,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2C")]
    //    Item2C,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2D")]
    //    Item2D,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2E")]
    //    Item2E,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2F")]
    //    Item2F,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2G")]
    //    Item2G,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2H")]
    //    Item2H,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2a")]
    //    Item2a,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2b")]
    //    Item2b,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2c")]
    //    Item2c,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2d")]
    //    Item2d,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2e")]
    //    Item2e,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2f")]
    //    Item2f,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2g")]
    //    Item2g,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2h")]
    //    Item2h,
    //}
    
    /// <summary>
    /// Amount By Month Detail Type102015-01-06Initial versionA group that wraps monthly amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class AmountByMonthDetailType
    {
        
        private string _januaryAmt;
        
        private string _februaryAmt;
        
        private string _marchAmt;
        
        private string _aprilAmt;
        
        private string _mayAmt;
        
        private string _juneAmt;
        
        private string _julyAmt;
        
        private string _augustAmt;
        
        private string _septemberAmt;
        
        private string _octoberAmt;
        
        private string _novemberAmt;
        
        private string _decemberAmt;
        
        private static XmlSerializer serializer;
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string JanuaryAmt
        {
            get
            {
                return this._januaryAmt;
            }
            set
            {
                this._januaryAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string FebruaryAmt
        {
            get
            {
                return this._februaryAmt;
            }
            set
            {
                this._februaryAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string MarchAmt
        {
            get
            {
                return this._marchAmt;
            }
            set
            {
                this._marchAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string AprilAmt
        {
            get
            {
                return this._aprilAmt;
            }
            set
            {
                this._aprilAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string MayAmt
        {
            get
            {
                return this._mayAmt;
            }
            set
            {
                this._mayAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string JuneAmt
        {
            get
            {
                return this._juneAmt;
            }
            set
            {
                this._juneAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string JulyAmt
        {
            get
            {
                return this._julyAmt;
            }
            set
            {
                this._julyAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string AugustAmt
        {
            get
            {
                return this._augustAmt;
            }
            set
            {
                this._augustAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string SeptemberAmt
        {
            get
            {
                return this._septemberAmt;
            }
            set
            {
                this._septemberAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string OctoberAmt
        {
            get
            {
                return this._octoberAmt;
            }
            set
            {
                this._octoberAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string NovemberAmt
        {
            get
            {
                return this._novemberAmt;
            }
            set
            {
                this._novemberAmt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string DecemberAmt
        {
            get
            {
                return this._decemberAmt;
            }
            set
            {
                this._decemberAmt = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountByMonthDetailType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountByMonthDetailType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AmountByMonthDetailType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountByMonthDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountByMonthDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountByMonthDetailType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out AmountByMonthDetailType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static AmountByMonthDetailType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountByMonthDetailType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static AmountByMonthDetailType Deserialize(System.IO.Stream s)
        {
            return ((AmountByMonthDetailType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current AmountByMonthDetailType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AmountByMonthDetailType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountByMonthDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountByMonthDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountByMonthDetailType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AmountByMonthDetailType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AmountByMonthDetailType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AmountByMonthDetailType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static AmountByMonthDetailType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Offer Coverage By Month Type102015-01-27Initial VersionOffer Coverage By Month Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class OfferCoverageByMonthType
    {
        
        private string _janOfferCd;
        
        private string _febOfferCd;
        
        private string _marOfferCd;
        
        private string _aprOfferCd;
        
        private string _mayOfferCd;
        
        private string _junOfferCd;
        
        private string _julOfferCd;
        
        private string _augOfferCd;
        
        private string _sepOfferCd;
        
        private string _octOfferCd;
        
        private string _novOfferCd;
        
        private string _decOfferCd;
        
        private static XmlSerializer serializer;
        
        public string JanOfferCd
        {
            get
            {
                return this._janOfferCd;
            }
            set
            {
                this._janOfferCd = value;
            }
        }
        
        public string FebOfferCd
        {
            get
            {
                return this._febOfferCd;
            }
            set
            {
                this._febOfferCd = value;
            }
        }
        
        public string MarOfferCd
        {
            get
            {
                return this._marOfferCd;
            }
            set
            {
                this._marOfferCd = value;
            }
        }
        
        public string AprOfferCd
        {
            get
            {
                return this._aprOfferCd;
            }
            set
            {
                this._aprOfferCd = value;
            }
        }
        
        public string MayOfferCd
        {
            get
            {
                return this._mayOfferCd;
            }
            set
            {
                this._mayOfferCd = value;
            }
        }
        
        public string JunOfferCd
        {
            get
            {
                return this._junOfferCd;
            }
            set
            {
                this._junOfferCd = value;
            }
        }
        
        public string JulOfferCd
        {
            get
            {
                return this._julOfferCd;
            }
            set
            {
                this._julOfferCd = value;
            }
        }
        
        public string AugOfferCd
        {
            get
            {
                return this._augOfferCd;
            }
            set
            {
                this._augOfferCd = value;
            }
        }
        
        public string SepOfferCd
        {
            get
            {
                return this._sepOfferCd;
            }
            set
            {
                this._sepOfferCd = value;
            }
        }
        
        public string OctOfferCd
        {
            get
            {
                return this._octOfferCd;
            }
            set
            {
                this._octOfferCd = value;
            }
        }
        
        public string NovOfferCd
        {
            get
            {
                return this._novOfferCd;
            }
            set
            {
                this._novOfferCd = value;
            }
        }
        
        public string DecOfferCd
        {
            get
            {
                return this._decOfferCd;
            }
            set
            {
                this._decOfferCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OfferCoverageByMonthType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OfferCoverageByMonthType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OfferCoverageByMonthType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OfferCoverageByMonthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OfferCoverageByMonthType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OfferCoverageByMonthType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out OfferCoverageByMonthType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static OfferCoverageByMonthType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OfferCoverageByMonthType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static OfferCoverageByMonthType Deserialize(System.IO.Stream s)
        {
            return ((OfferCoverageByMonthType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current OfferCoverageByMonthType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OfferCoverageByMonthType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OfferCoverageByMonthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OfferCoverageByMonthType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OfferCoverageByMonthType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OfferCoverageByMonthType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OfferCoverageByMonthType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OfferCoverageByMonthType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static OfferCoverageByMonthType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    ///// <summary>
    ///// Offer Coverage Type102016-06-29Inital VersionOffer Coverage
    ///// </summary>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    //public enum OfferCoverageType
    //{
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1A")]
    //    Item1A,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1B")]
    //    Item1B,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1C")]
    //    Item1C,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1D")]
    //    Item1D,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1E")]
    //    Item1E,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1F")]
    //    Item1F,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1G")]
    //    Item1G,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1H")]
    //    Item1H,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1J")]
    //    Item1J,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1K")]
    //    Item1K,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1a")]
    //    Item1a,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1b")]
    //    Item1b,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1c")]
    //    Item1c,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1d")]
    //    Item1d,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1e")]
    //    Item1e,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1f")]
    //    Item1f,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1g")]
    //    Item1g,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1h")]
    //    Item1h,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1j")]
    //    Item1j,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1k")]
    //    Item1k,
    //}
    
    /// <summary>
    /// Employee Offer and Coverage Group Type102016-09-06Initial versionEmployee Offer and Coverage Group Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class EmployeeOfferAndCoverageGrpType
    {
    
        private string _annualOfferOfCoverageCd;
        
        private OfferCoverageByMonthType _monthlyOfferCoverageGrp;
        
        private string _annlShrLowestCostMthlyPremAmt;
        
        private AmountByMonthDetailType _monthlyShareOfLowestCostMonthlyPremGrp;
        
        private string _annualSafeHarborCd;
        
        private MonthlySafeHarborCdType _monthlySafeHarborGrp;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// EmployeeOfferAndCoverageGrpType class constructor
        /// </summary>
        public EmployeeOfferAndCoverageGrpType()
        {
            this._monthlySafeHarborGrp = new MonthlySafeHarborCdType();
            this._monthlyShareOfLowestCostMonthlyPremGrp = new AmountByMonthDetailType();
            this._monthlyOfferCoverageGrp = new OfferCoverageByMonthType();
        }
        
        public string AnnualOfferOfCoverageCd
        {
            get
            {
                return this._annualOfferOfCoverageCd;
            }
            set
            {
                this._annualOfferOfCoverageCd = value;
            }
        }
        
        public OfferCoverageByMonthType MonthlyOfferCoverageGrp
        {
            get
            {
                return this._monthlyOfferCoverageGrp;
            }
            set
            {
                this._monthlyOfferCoverageGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(19)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9]+\\.[0-9][0-9]?)")]
        public string AnnlShrLowestCostMthlyPremAmt
        {
            get
            {
                return this._annlShrLowestCostMthlyPremAmt;
            }
            set
            {
                this._annlShrLowestCostMthlyPremAmt = value;
            }
        }
        
        public AmountByMonthDetailType MonthlyShareOfLowestCostMonthlyPremGrp
        {
            get
            {
                return this._monthlyShareOfLowestCostMonthlyPremGrp;
            }
            set
            {
                this._monthlyShareOfLowestCostMonthlyPremGrp = value;
            }
        }
        
        public string AnnualSafeHarborCd
        { 
            get
            {
                return this._annualSafeHarborCd;
            }
            set
            {
                this._annualSafeHarborCd = value;
            }
        }
        
        public MonthlySafeHarborCdType MonthlySafeHarborGrp
        {
            get
            {
                return this._monthlySafeHarborGrp;
            }
            set
            {
                this._monthlySafeHarborGrp = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EmployeeOfferAndCoverageGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EmployeeOfferAndCoverageGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EmployeeOfferAndCoverageGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EmployeeOfferAndCoverageGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EmployeeOfferAndCoverageGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployeeOfferAndCoverageGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out EmployeeOfferAndCoverageGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static EmployeeOfferAndCoverageGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EmployeeOfferAndCoverageGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static EmployeeOfferAndCoverageGrpType Deserialize(System.IO.Stream s)
        {
            return ((EmployeeOfferAndCoverageGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current EmployeeOfferAndCoverageGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EmployeeOfferAndCoverageGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EmployeeOfferAndCoverageGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EmployeeOfferAndCoverageGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployeeOfferAndCoverageGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EmployeeOfferAndCoverageGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EmployeeOfferAndCoverageGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EmployeeOfferAndCoverageGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static EmployeeOfferAndCoverageGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Employee Information Group Type102015-01-27Initial VersionEmployee Information Group Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class EmployeeInformationGrpType
    {
        
        private OtherCompletePersonNameType _otherCompletePersonName;
        
        private string _personNameControlTxt;
        
        private TINRequestTypeCodeType _tINRequestTypeCd;
        
        private string _sSN;
        
        private BusinessAddressGrpType _mailingAddressGrp;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// EmployeeInformationGrpType class constructor
        /// </summary>
        public EmployeeInformationGrpType()
        {
            this._mailingAddressGrp = new BusinessAddressGrpType();
            this._otherCompletePersonName = new OtherCompletePersonNameType();
        }
        
        public OtherCompletePersonNameType OtherCompletePersonName
        {
            get
            {
                return this._otherCompletePersonName;
            }
            set
            {
                this._otherCompletePersonName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z][A-Z\\- ]{0,3}")]
        public string PersonNameControlTxt
        {
            get
            {
                return this._personNameControlTxt;
            }
            set
            {
                this._personNameControlTxt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        public TINRequestTypeCodeType TINRequestTypeCd
        {
            get
            {
                return this._tINRequestTypeCd;
            }
            set
            {
                this._tINRequestTypeCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string SSN
        {
            get
            {
                return this._sSN;
            }
            set
            {
                this._sSN = value;
            }
        }
        
        public BusinessAddressGrpType MailingAddressGrp
        {
            get
            {
                return this._mailingAddressGrp;
            }
            set
            {
                this._mailingAddressGrp = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EmployeeInformationGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EmployeeInformationGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EmployeeInformationGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EmployeeInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EmployeeInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployeeInformationGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out EmployeeInformationGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static EmployeeInformationGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EmployeeInformationGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static EmployeeInformationGrpType Deserialize(System.IO.Stream s)
        {
            return ((EmployeeInformationGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current EmployeeInformationGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EmployeeInformationGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EmployeeInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EmployeeInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployeeInformationGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EmployeeInformationGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EmployeeInformationGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EmployeeInformationGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static EmployeeInformationGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Business Address Group Type102008-01-08Initial VersionType for a Exchange Periodic Data Business address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class BusinessAddressGrpType
    {
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ForeignAddressGrp", typeof(ForeignAddressGrpType))]
        [System.Xml.Serialization.XmlElementAttribute("USAddressGrp", typeof(USAddressGrpType))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BusinessAddressGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BusinessAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BusinessAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BusinessAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BusinessAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BusinessAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BusinessAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BusinessAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((BusinessAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BusinessAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BusinessAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BusinessAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BusinessAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BusinessAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static BusinessAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Foreign Address Group Type102013-01-25Initial versionA group that wraps detail associated with a generic foreign address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class ForeignAddressGrpType
    {
        
        private string _addressLine1Txt;
        
        private string _addressLine2Txt;
        
        private string _cityNm;
        
        private object _item;
        
        private string _foreignProvinceNm;
        
        private string _foreignPostalCd;
        
        private static XmlSerializer serializer;
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine1Txt
        {
            get
            {
                return this._addressLine1Txt;
            }
            set
            {
                this._addressLine1Txt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine2Txt
        {
            get
            {
                return this._addressLine2Txt;
            }
            set
            {
                this._addressLine2Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(22)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z] ?)*[A-Za-z]")]
        public string CityNm
        {
            get
            {
                return this._cityNm;
            }
            set
            {
                this._cityNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryCd", typeof(CountryType))]
        [System.Xml.Serialization.XmlElementAttribute("CountryNm", typeof(string))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(17)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\.\\-/\'])*")]
        public string ForeignProvinceNm
        {
            get
            {
                return this._foreignProvinceNm;
            }
            set
            {
                this._foreignProvinceNm = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\.\\-/])*")]
        public string ForeignPostalCd
        {
            get
            {
                return this._foreignPostalCd;
            }
            set
            {
                this._foreignPostalCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ForeignAddressGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ForeignAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ForeignAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ForeignAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ForeignAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ForeignAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ForeignAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ForeignAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ForeignAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((ForeignAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ForeignAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ForeignAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ForeignAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ForeignAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ForeignAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ForeignAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ForeignAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Country abbreviations, a.k.a. country codes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public enum CountryType
    {
        
        /// <summary>
        /// Afghanistan
        /// </summary>
        AF,
        
        /// <summary>
        /// Akrotiri
        /// </summary>
        AX,
        
        /// <summary>
        /// Albania
        /// </summary>
        AL,
        
        /// <summary>
        /// Algeria
        /// </summary>
        AG,
        
        /// <summary>
        /// American Samoa
        /// </summary>
        AQ,
        
        /// <summary>
        /// Andorra
        /// </summary>
        AN,
        
        /// <summary>
        /// Angola
        /// </summary>
        AO,
        
        /// <summary>
        /// Anguilla
        /// </summary>
        AV,
        
        /// <summary>
        /// Antarctica
        /// </summary>
        AY,
        
        /// <summary>
        /// Antigua and Barbuda
        /// </summary>
        AC,
        
        /// <summary>
        /// Argentina
        /// </summary>
        AR,
        
        /// <summary>
        /// Armenia
        /// </summary>
        AM,
        
        /// <summary>
        /// Aruba
        /// </summary>
        AA,
        
        /// <summary>
        /// Ashmore and Cartier Islands
        /// </summary>
        AT,
        
        /// <summary>
        /// Australia
        /// </summary>
        AS,
        
        /// <summary>
        /// Austria
        /// </summary>
        AU,
        
        /// <summary>
        /// Azerbaijan
        /// </summary>
        AJ,
        
        /// <summary>
        /// Bahamas
        /// </summary>
        BF,
        
        /// <summary>
        /// Bahrain
        /// </summary>
        BA,
        
        /// <summary>
        /// Baker Island
        /// </summary>
        FQ,
        
        /// <summary>
        /// Bangladesh
        /// </summary>
        BG,
        
        /// <summary>
        /// Barbados
        /// </summary>
        BB,
        
        /// <summary>
        /// Belarus
        /// </summary>
        BO,
        
        /// <summary>
        /// Belgium
        /// </summary>
        BE,
        
        /// <summary>
        /// Belize
        /// </summary>
        BH,
        
        /// <summary>
        /// Benin
        /// </summary>
        BN,
        
        /// <summary>
        /// Bermuda
        /// </summary>
        BD,
        
        /// <summary>
        /// Bhutan
        /// </summary>
        BT,
        
        /// <summary>
        /// Bolivia
        /// </summary>
        BL,
        
        /// <summary>
        /// Bosnia-Herzegovina
        /// </summary>
        BK,
        
        /// <summary>
        /// Botswana
        /// </summary>
        BC,
        
        /// <summary>
        /// Bouvet Island
        /// </summary>
        BV,
        
        /// <summary>
        /// Brazil
        /// </summary>
        BR,
        
        /// <summary>
        /// British Indian Ocean Territory
        /// </summary>
        IO,
        
        /// <summary>
        /// British Virgin Islands
        /// </summary>
        VI,
        
        /// <summary>
        /// Brunei
        /// </summary>
        BX,
        
        /// <summary>
        /// Bulgaria
        /// </summary>
        BU,
        
        /// <summary>
        /// Burkina Faso
        /// </summary>
        UV,
        
        /// <summary>
        /// Burma
        /// </summary>
        BM,
        
        /// <summary>
        /// Burundi
        /// </summary>
        BY,
        
        /// <summary>
        /// Cambodia
        /// </summary>
        CB,
        
        /// <summary>
        /// Cameroon
        /// </summary>
        CM,
        
        /// <summary>
        /// Canada
        /// </summary>
        CA,
        
        /// <summary>
        /// Cape Verde
        /// </summary>
        CV,
        
        /// <summary>
        /// Cayman Islands
        /// </summary>
        CJ,
        
        /// <summary>
        /// Central African Republic
        /// </summary>
        CT,
        
        /// <summary>
        /// Chad
        /// </summary>
        CD,
        
        /// <summary>
        /// Chile
        /// </summary>
        CI,
        
        /// <summary>
        /// China
        /// </summary>
        CH,
        
        /// <summary>
        /// Christmas Island
        /// </summary>
        KT,
        
        /// <summary>
        /// Clipperton Island
        /// </summary>
        IP,
        
        /// <summary>
        /// Cocos (Keeling) Islands
        /// </summary>
        CK,
        
        /// <summary>
        /// Colombia
        /// </summary>
        CO,
        
        /// <summary>
        /// Comoros
        /// </summary>
        CN,
        
        /// <summary>
        /// Congo (Brazzaville)
        /// </summary>
        CF,
        
        /// <summary>
        /// Congo (Kinshasa)
        /// </summary>
        CG,
        
        /// <summary>
        /// Cook Islands
        /// </summary>
        CW,
        
        /// <summary>
        /// Coral Sea Islands
        /// </summary>
        CR,
        
        /// <summary>
        /// Costa Rica
        /// </summary>
        CS,
        
        /// <summary>
        /// Cote D'Ivoire (Ivory Coast)
        /// </summary>
        IV,
        
        /// <summary>
        /// Croatia
        /// </summary>
        HR,
        
        /// <summary>
        /// Cuba
        /// </summary>
        CU,
        
        /// <summary>
        /// Curacao
        /// </summary>
        UC,
        
        /// <summary>
        /// Cyprus
        /// </summary>
        CY,
        
        /// <summary>
        /// Czech Republic
        /// </summary>
        EZ,
        
        /// <summary>
        /// Denmark
        /// </summary>
        DA,
        
        /// <summary>
        /// Dhekelia
        /// </summary>
        DX,
        
        /// <summary>
        /// Djibouti
        /// </summary>
        DJ,
        
        /// <summary>
        /// Dominica
        /// </summary>
        DO,
        
        /// <summary>
        /// Dominican Republic
        /// </summary>
        DR,
        
        /// <summary>
        /// East Timor
        /// </summary>
        TT,
        
        /// <summary>
        /// Ecuador
        /// </summary>
        EC,
        
        /// <summary>
        /// Egypt
        /// </summary>
        EG,
        
        /// <summary>
        /// El Salvador
        /// </summary>
        ES,
        
        /// <summary>
        /// Equatorial Guinea
        /// </summary>
        EK,
        
        /// <summary>
        /// Eritrea
        /// </summary>
        ER,
        
        /// <summary>
        /// Estonia
        /// </summary>
        EN,
        
        /// <summary>
        /// Ethiopia
        /// </summary>
        ET,
        
        /// <summary>
        /// Falkland Islands (Islas Malvinas)
        /// </summary>
        FK,
        
        /// <summary>
        /// Faroe Islands
        /// </summary>
        FO,
        
        /// <summary>
        /// Federated States of Micronesia
        /// </summary>
        FM,
        
        /// <summary>
        /// Fiji
        /// </summary>
        FJ,
        
        /// <summary>
        /// Finland
        /// </summary>
        FI,
        
        /// <summary>
        /// France
        /// </summary>
        FR,
        
        /// <summary>
        /// French Polynesia
        /// </summary>
        FP,
        
        /// <summary>
        /// French Southern and Antarctic Lands
        /// </summary>
        FS,
        
        /// <summary>
        /// Gabon
        /// </summary>
        GB,
        
        /// <summary>
        /// The Gambia
        /// </summary>
        GA,
        
        /// <summary>
        /// Georgia
        /// </summary>
        GG,
        
        /// <summary>
        /// Germany
        /// </summary>
        GM,
        
        /// <summary>
        /// Ghana
        /// </summary>
        GH,
        
        /// <summary>
        /// Gibraltar
        /// </summary>
        GI,
        
        /// <summary>
        /// Greece
        /// </summary>
        GR,
        
        /// <summary>
        /// Greenland
        /// </summary>
        GL,
        
        /// <summary>
        /// Grenada
        /// </summary>
        GJ,
        
        /// <summary>
        /// Guam
        /// </summary>
        GQ,
        
        /// <summary>
        /// Guatemala
        /// </summary>
        GT,
        
        /// <summary>
        /// Guernsey
        /// </summary>
        GK,
        
        /// <summary>
        /// Guinea
        /// </summary>
        GV,
        
        /// <summary>
        /// Guinea-Bissau
        /// </summary>
        PU,
        
        /// <summary>
        /// Guyana
        /// </summary>
        GY,
        
        /// <summary>
        /// Haiti
        /// </summary>
        HA,
        
        /// <summary>
        /// Heard Island and McDonald Islands
        /// </summary>
        HM,
        
        /// <summary>
        /// Holy See
        /// </summary>
        VT,
        
        /// <summary>
        /// Honduras
        /// </summary>
        HO,
        
        /// <summary>
        /// Hong Kong
        /// </summary>
        HK,
        
        /// <summary>
        /// Howland Island
        /// </summary>
        HQ,
        
        /// <summary>
        /// Hungary
        /// </summary>
        HU,
        
        /// <summary>
        /// Iceland
        /// </summary>
        IC,
        
        /// <summary>
        /// India
        /// </summary>
        IN,
        
        /// <summary>
        /// Indonesia
        /// </summary>
        ID,
        
        /// <summary>
        /// Iran
        /// </summary>
        IR,
        
        /// <summary>
        /// Iraq
        /// </summary>
        IZ,
        
        /// <summary>
        /// Ireland
        /// </summary>
        EI,
        
        /// <summary>
        /// Israel
        /// </summary>
        IS,
        
        /// <summary>
        /// Italy
        /// </summary>
        IT,
        
        /// <summary>
        /// Jamaica
        /// </summary>
        JM,
        
        /// <summary>
        /// Jan Mayen
        /// </summary>
        JN,
        
        /// <summary>
        /// Japan
        /// </summary>
        JA,
        
        /// <summary>
        /// Jarvis Island
        /// </summary>
        DQ,
        
        /// <summary>
        /// Jersey
        /// </summary>
        JE,
        
        /// <summary>
        /// Johnston Atoll
        /// </summary>
        JQ,
        
        /// <summary>
        /// Jordan
        /// </summary>
        JO,
        
        /// <summary>
        /// Kazakhstan
        /// </summary>
        KZ,
        
        /// <summary>
        /// Kenya
        /// </summary>
        KE,
        
        /// <summary>
        /// Kingman Reef
        /// </summary>
        KQ,
        
        /// <summary>
        /// Kiribati
        /// </summary>
        KR,
        
        /// <summary>
        /// Korea, Democratic People's Republic of (North)
        /// </summary>
        KN,
        
        /// <summary>
        /// Korea, Republic of (South)
        /// </summary>
        KS,
        
        /// <summary>
        /// Kosovo
        /// </summary>
        KV,
        
        /// <summary>
        /// Kuwait
        /// </summary>
        KU,
        
        /// <summary>
        /// Kyrgyzstan
        /// </summary>
        KG,
        
        /// <summary>
        /// Laos
        /// </summary>
        LA,
        
        /// <summary>
        /// Latvia
        /// </summary>
        LG,
        
        /// <summary>
        /// Lebanon
        /// </summary>
        LE,
        
        /// <summary>
        /// Lesotho
        /// </summary>
        LT,
        
        /// <summary>
        /// Liberia
        /// </summary>
        LI,
        
        /// <summary>
        /// Libya
        /// </summary>
        LY,
        
        /// <summary>
        /// Liechtenstein
        /// </summary>
        LS,
        
        /// <summary>
        /// Lithuania
        /// </summary>
        LH,
        
        /// <summary>
        /// Luxembourg
        /// </summary>
        LU,
        
        /// <summary>
        /// Macau
        /// </summary>
        MC,
        
        /// <summary>
        /// Macedonia
        /// </summary>
        MK,
        
        /// <summary>
        /// Madagascar
        /// </summary>
        MA,
        
        /// <summary>
        /// Malawi
        /// </summary>
        MI,
        
        /// <summary>
        /// Malaysia
        /// </summary>
        MY,
        
        /// <summary>
        /// Maldives
        /// </summary>
        MV,
        
        /// <summary>
        /// Mali
        /// </summary>
        ML,
        
        /// <summary>
        /// Malta
        /// </summary>
        MT,
        
        /// <summary>
        /// Man, Isle of
        /// </summary>
        IM,
        
        /// <summary>
        /// Marshall Islands
        /// </summary>
        RM,
        
        /// <summary>
        /// Mauritania
        /// </summary>
        MR,
        
        /// <summary>
        /// Mauritius
        /// </summary>
        MP,
        
        /// <summary>
        /// Mexico
        /// </summary>
        MX,
        
        /// <summary>
        /// Midway Islands
        /// </summary>
        MQ,
        
        /// <summary>
        /// Moldova
        /// </summary>
        MD,
        
        /// <summary>
        /// Monaco
        /// </summary>
        MN,
        
        /// <summary>
        /// Mongolia
        /// </summary>
        MG,
        
        /// <summary>
        /// Montenegro
        /// </summary>
        MJ,
        
        /// <summary>
        /// Montserrat
        /// </summary>
        MH,
        
        /// <summary>
        /// Morocco
        /// </summary>
        MO,
        
        /// <summary>
        /// Mozambique
        /// </summary>
        MZ,
        
        /// <summary>
        /// Namibia
        /// </summary>
        WA,
        
        /// <summary>
        /// Nauru
        /// </summary>
        NR,
        
        /// <summary>
        /// Navassa Island
        /// </summary>
        BQ,
        
        /// <summary>
        /// Nepal
        /// </summary>
        NP,
        
        /// <summary>
        /// Netherlands
        /// </summary>
        NL,
        
        /// <summary>
        /// New Caledonia
        /// </summary>
        NC,
        
        /// <summary>
        /// New Zealand
        /// </summary>
        NZ,
        
        /// <summary>
        /// Nicaragua
        /// </summary>
        NU,
        
        /// <summary>
        /// Niger
        /// </summary>
        NG,
        
        /// <summary>
        /// Nigeria
        /// </summary>
        NI,
        
        /// <summary>
        /// Niue
        /// </summary>
        NE,
        
        /// <summary>
        /// Norfolk Island
        /// </summary>
        NF,
        
        /// <summary>
        /// Northern Mariana Islands
        /// </summary>
        CQ,
        
        /// <summary>
        /// Norway
        /// </summary>
        NO,
        
        /// <summary>
        /// Oman
        /// </summary>
        MU,
        
        /// <summary>
        /// Other Country
        /// </summary>
        OC,
        
        /// <summary>
        /// Pakistan
        /// </summary>
        PK,
        
        /// <summary>
        /// Palau
        /// </summary>
        PS,
        
        /// <summary>
        /// Palmyra Atoll
        /// </summary>
        LQ,
        
        /// <summary>
        /// Panama
        /// </summary>
        PM,
        
        /// <summary>
        /// Papua-New Guinea
        /// </summary>
        PP,
        
        /// <summary>
        /// Paracel Islands
        /// </summary>
        PF,
        
        /// <summary>
        /// Paraguay
        /// </summary>
        PA,
        
        /// <summary>
        /// Peru
        /// </summary>
        PE,
        
        /// <summary>
        /// Philippines
        /// </summary>
        RP,
        
        /// <summary>
        /// Pitcairn Islands
        /// </summary>
        PC,
        
        /// <summary>
        /// Poland
        /// </summary>
        PL,
        
        /// <summary>
        /// Portugal
        /// </summary>
        PO,
        
        /// <summary>
        /// Puerto Rico
        /// </summary>
        RQ,
        
        /// <summary>
        /// Qatar
        /// </summary>
        QA,
        
        /// <summary>
        /// Romania
        /// </summary>
        RO,
        
        /// <summary>
        /// Russia
        /// </summary>
        RS,
        
        /// <summary>
        /// Rwanda
        /// </summary>
        RW,
        
        /// <summary>
        /// Saint Barthelemy
        /// </summary>
        TB,
        
        /// <summary>
        /// Saint Martin
        /// </summary>
        RN,
        
        /// <summary>
        /// Samoa
        /// </summary>
        WS,
        
        /// <summary>
        /// San Marino
        /// </summary>
        SM,
        
        /// <summary>
        /// Sao Tome and Principe
        /// </summary>
        TP,
        
        /// <summary>
        /// Saudi Arabia
        /// </summary>
        SA,
        
        /// <summary>
        /// Senegal
        /// </summary>
        SG,
        
        /// <summary>
        /// Serbia
        /// </summary>
        RI,
        
        /// <summary>
        /// Seychelles
        /// </summary>
        SE,
        
        /// <summary>
        /// Sierra Leone
        /// </summary>
        SL,
        
        /// <summary>
        /// Singapore
        /// </summary>
        SN,
        
        /// <summary>
        /// Sint Maarten
        /// </summary>
        NN,
        
        /// <summary>
        /// Slovakia
        /// </summary>
        LO,
        
        /// <summary>
        /// Slovenia
        /// </summary>
        SI,
        
        /// <summary>
        /// Solomon Islands
        /// </summary>
        BP,
        
        /// <summary>
        /// Somalia
        /// </summary>
        SO,
        
        /// <summary>
        /// South Africa
        /// </summary>
        SF,
        
        /// <summary>
        /// South Georgia and the South Sandwich Islands
        /// </summary>
        SX,
        
        /// <summary>
        /// South Sudan
        /// </summary>
        OD,
        
        /// <summary>
        /// Spain
        /// </summary>
        SP,
        
        /// <summary>
        /// Spratly Islands
        /// </summary>
        PG,
        
        /// <summary>
        /// Sri Lanka
        /// </summary>
        CE,
        
        /// <summary>
        /// St. Helena
        /// </summary>
        SH,
        
        /// <summary>
        /// St. Kitts and Nevis
        /// </summary>
        SC,
        
        /// <summary>
        /// St. Lucia Island
        /// </summary>
        ST,
        
        /// <summary>
        /// St. Pierre and Miquelon
        /// </summary>
        SB,
        
        /// <summary>
        /// St. Vincent and the Grenadines
        /// </summary>
        VC,
        
        /// <summary>
        /// Sudan
        /// </summary>
        SU,
        
        /// <summary>
        /// Suriname
        /// </summary>
        NS,
        
        /// <summary>
        /// Svalbard
        /// </summary>
        SV,
        
        /// <summary>
        /// Swaziland
        /// </summary>
        WZ,
        
        /// <summary>
        /// Sweden
        /// </summary>
        SW,
        
        /// <summary>
        /// Switzerland
        /// </summary>
        SZ,
        
        /// <summary>
        /// Syria
        /// </summary>
        SY,
        
        /// <summary>
        /// Taiwan
        /// </summary>
        TW,
        
        /// <summary>
        /// Tajikistan
        /// </summary>
        TI,
        
        /// <summary>
        /// Tanzania
        /// </summary>
        TZ,
        
        /// <summary>
        /// Thailand
        /// </summary>
        TH,
        
        /// <summary>
        /// Togo
        /// </summary>
        TO,
        
        /// <summary>
        /// Tokelau
        /// </summary>
        TL,
        
        /// <summary>
        /// Tonga
        /// </summary>
        TN,
        
        /// <summary>
        /// Trinidad and Tobago
        /// </summary>
        TD,
        
        /// <summary>
        /// Tunisia
        /// </summary>
        TS,
        
        /// <summary>
        /// Turkey
        /// </summary>
        TU,
        
        /// <summary>
        /// Turkmenistan
        /// </summary>
        TX,
        
        /// <summary>
        /// Turks and Caicos Islands
        /// </summary>
        TK,
        
        /// <summary>
        /// Tuvalu
        /// </summary>
        TV,
        
        /// <summary>
        /// Uganda
        /// </summary>
        UG,
        
        /// <summary>
        /// Ukraine
        /// </summary>
        UP,
        
        /// <summary>
        /// United Arab Emirates
        /// </summary>
        AE,
        
        /// <summary>
        /// United Kingdom (England, Northern Ireland, Scotland, and Wales)
        /// </summary>
        UK,
        
        /// <summary>
        /// Uruguay
        /// </summary>
        UY,
        
        /// <summary>
        /// Uzbekistan
        /// </summary>
        UZ,
        
        /// <summary>
        /// Vanuatu
        /// </summary>
        NH,
        
        /// <summary>
        /// Venezuela
        /// </summary>
        VE,
        
        /// <summary>
        /// Vietnam
        /// </summary>
        VM,
        
        /// <summary>
        /// Virgin Islands
        /// </summary>
        VQ,
        
        /// <summary>
        /// Wake Island
        /// </summary>
        WQ,
        
        /// <summary>
        /// Wallis and Futuna
        /// </summary>
        WF,
        
        /// <summary>
        /// Western Sahara
        /// </summary>
        WI,
        
        /// <summary>
        /// Yemen (Aden)
        /// </summary>
        YM,
        
        /// <summary>
        /// Zambia
        /// </summary>
        ZA,
        
        /// <summary>
        /// Zimbabwe
        /// </summary>
        ZI,
    }
    
    /// <summary>
    /// US Address Group Type102008-01-08Initial VersionType for a Exchange Periodic Data person address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class USAddressGrpType
    {
        
        private string _addressLine1Txt;
        
        private string _addressLine2Txt;
        
        private string _cityNm;
        
        private StateType _uSStateCd;
        
        private string _uSZIPCd;
        
        private string _uSZIPExtensionCd;
        
        private static XmlSerializer serializer;
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine1Txt
        {
            get
            {
                return this._addressLine1Txt;
            }
            set
            {
                this._addressLine1Txt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine2Txt
        {
            get
            {
                return this._addressLine2Txt;
            }
            set
            {
                this._addressLine2Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(22)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z] ?)*[A-Za-z]")]
        public string CityNm
        {
            get
            {
                return this._cityNm;
            }
            set
            {
                this._cityNm = value;
            }
        }
        
        public StateType USStateCd
        {
            get
            {
                return this._uSStateCd;
            }
            set
            {
                this._uSStateCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{5}")]
        public string USZIPCd
        {
            get
            {
                return this._uSZIPCd;
            }
            set
            {
                this._uSZIPCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{4}")]
        public string USZIPExtensionCd
        {
            get
            {
                return this._uSZIPExtensionCd;
            }
            set
            {
                this._uSZIPExtensionCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(USAddressGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current USAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an USAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output USAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out USAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out USAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static USAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((USAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static USAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((USAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current USAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an USAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output USAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out USAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out USAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out USAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static USAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static USAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// State Type102015-05-19MeF EFileTypesOne of the 50 states of the United States, a territory of the United States, the District of Columbia, or an APO/FPO/DPO (Military) designation.  These are each designated by a unique 2 character code assigned by the US Post Office.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public enum StateType
    {
        
        /// <summary>
        /// Alabama
        /// </summary>
        AL,
        
        /// <summary>
        /// Alaska
        /// </summary>
        AK,
        
        /// <summary>
        /// American Samoa
        /// </summary>
        AS,
        
        /// <summary>
        /// Arizona
        /// </summary>
        AZ,
        
        /// <summary>
        /// Arkansas
        /// </summary>
        AR,
        
        /// <summary>
        /// California
        /// </summary>
        CA,
        
        /// <summary>
        /// Colorado
        /// </summary>
        CO,
        
        /// <summary>
        /// Commonwealth of the Northern Mariana Islands
        /// </summary>
        MP,
        
        /// <summary>
        /// Connecticut
        /// </summary>
        CT,
        
        /// <summary>
        /// Delaware
        /// </summary>
        DE,
        
        /// <summary>
        /// District of Columbia
        /// </summary>
        DC,
        
        /// <summary>
        /// Federated States of Micronesia
        /// </summary>
        FM,
        
        /// <summary>
        /// Florida
        /// </summary>
        FL,
        
        /// <summary>
        /// Georgia
        /// </summary>
        GA,
        
        /// <summary>
        /// Guam
        /// </summary>
        GU,
        
        /// <summary>
        /// Hawaii
        /// </summary>
        HI,
        
        /// <summary>
        /// Idaho
        /// </summary>
        ID,
        
        /// <summary>
        /// Illinois
        /// </summary>
        IL,
        
        /// <summary>
        /// Indiana
        /// </summary>
        IN,
        
        /// <summary>
        /// Iowa
        /// </summary>
        IA,
        
        /// <summary>
        /// Kansas
        /// </summary>
        KS,
        
        /// <summary>
        /// Kentucky
        /// </summary>
        KY,
        
        /// <summary>
        /// Louisiana
        /// </summary>
        LA,
        
        /// <summary>
        /// Maine
        /// </summary>
        ME,
        
        /// <summary>
        /// Marshall Islands
        /// </summary>
        MH,
        
        /// <summary>
        /// Maryland
        /// </summary>
        MD,
        
        /// <summary>
        /// Massachusetts
        /// </summary>
        MA,
        
        /// <summary>
        /// Michigan
        /// </summary>
        MI,
        
        /// <summary>
        /// Minnesota
        /// </summary>
        MN,
        
        /// <summary>
        /// Mississippi
        /// </summary>
        MS,
        
        /// <summary>
        /// Missouri
        /// </summary>
        MO,
        
        /// <summary>
        /// Montana
        /// </summary>
        MT,
        
        /// <summary>
        /// Nebraska
        /// </summary>
        NE,
        
        /// <summary>
        /// Nevada
        /// </summary>
        NV,
        
        /// <summary>
        /// New Hampshire
        /// </summary>
        NH,
        
        /// <summary>
        /// New Jersey
        /// </summary>
        NJ,
        
        /// <summary>
        /// New Mexico
        /// </summary>
        NM,
        
        /// <summary>
        /// New York
        /// </summary>
        NY,
        
        /// <summary>
        /// North Carolina
        /// </summary>
        NC,
        
        /// <summary>
        /// North Dakota
        /// </summary>
        ND,
        
        /// <summary>
        /// Ohio
        /// </summary>
        OH,
        
        /// <summary>
        /// Oklahoma
        /// </summary>
        OK,
        
        /// <summary>
        /// Oregon
        /// </summary>
        OR,
        
        /// <summary>
        /// Palau
        /// </summary>
        PW,
        
        /// <summary>
        /// Pennsylvania
        /// </summary>
        PA,
        
        /// <summary>
        /// Puerto Rico
        /// </summary>
        PR,
        
        /// <summary>
        /// Rhode Island
        /// </summary>
        RI,
        
        /// <summary>
        /// South Carolina
        /// </summary>
        SC,
        
        /// <summary>
        /// South Dakota
        /// </summary>
        SD,
        
        /// <summary>
        /// Tennessee
        /// </summary>
        TN,
        
        /// <summary>
        /// Texas
        /// </summary>
        TX,
        
        /// <summary>
        /// U.S. Virgin Islands
        /// </summary>
        VI,
        
        /// <summary>
        /// Utah
        /// </summary>
        UT,
        
        /// <summary>
        /// Vermont
        /// </summary>
        VT,
        
        /// <summary>
        /// Virginia
        /// </summary>
        VA,
        
        /// <summary>
        /// Washington
        /// </summary>
        WA,
        
        /// <summary>
        /// West Virginia
        /// </summary>
        WV,
        
        /// <summary>
        /// Wisconsin
        /// </summary>
        WI,
        
        /// <summary>
        /// Wyoming
        /// </summary>
        WY,
        
        /// <summary>
        /// Armed Forces the Americas
        /// </summary>
        AA,
        
        /// <summary>
        /// Armed Forces Europe
        /// </summary>
        AE,
        
        /// <summary>
        /// Armed Forces Pacific
        /// </summary>
        AP,
    }
    
    /// <summary>
    /// Correction Record Information Group Type102015-01-27Initial VersionInformation to identify the record being corrected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class CorrectedRecordInfoGrpType
    {
        
        private string _correctedUniqueRecordId;
        
        private OtherCompletePersonNameType _correctedRecordPayeeName;
        
        private string _correctedRecordPayeeTIN;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// CorrectedRecordInfoGrpType class constructor
        /// </summary>
        public CorrectedRecordInfoGrpType()
        {
            this._correctedRecordPayeeName = new OtherCompletePersonNameType();
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^\\s].[^\\s]{1,80}\\|[1-9]{1}[0-9]{0,15}\\|[1-9]{1}[0-9]{0,15}")]
        public string CorrectedUniqueRecordId
        {
            get
            {
                return this._correctedUniqueRecordId;
            }
            set
            {
                this._correctedUniqueRecordId = value;
            }
        }
        
        public OtherCompletePersonNameType CorrectedRecordPayeeName
        {
            get
            {
                return this._correctedRecordPayeeName;
            }
            set
            {
                this._correctedRecordPayeeName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string CorrectedRecordPayeeTIN
        {
            get
            {
                return this._correctedRecordPayeeTIN;
            }
            set
            {
                this._correctedRecordPayeeTIN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CorrectedRecordInfoGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorrectedRecordInfoGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorrectedRecordInfoGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorrectedRecordInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CorrectedRecordInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorrectedRecordInfoGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CorrectedRecordInfoGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CorrectedRecordInfoGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CorrectedRecordInfoGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CorrectedRecordInfoGrpType Deserialize(System.IO.Stream s)
        {
            return ((CorrectedRecordInfoGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CorrectedRecordInfoGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorrectedRecordInfoGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorrectedRecordInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorrectedRecordInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorrectedRecordInfoGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorrectedRecordInfoGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorrectedRecordInfoGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorrectedRecordInfoGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static CorrectedRecordInfoGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Form 1095-C Upstream Detail Type102016-06-13Initial versionForm 1095-C  Employer-Provided Health Insurance Offer and Coverage Statement
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class Form1095CUpstreamDetailType
    {
        
        private string _recordId;
        
        private string _testScenarioId;
        
        private DigitBooleanType _correctedInd;
        
        private CorrectedRecordInfoGrpType _correctedRecordInfoGrp;
        
        private string _taxYr;
        
        private EmployeeInformationGrpType _employeeInfoGrp;
        
        private string _aLEContactPhoneNum;
        
        private string _startMonthNumberCd;
        
        private EmployeeOfferAndCoverageGrpType _employeeOfferAndCoverageGrp;
        
        private DigitBooleanType _coveredIndividualInd;
        
        private List<EmployerCoveredIndividualType> _coveredIndividualGrp;
        
        private string _recordType;
        
        private string _lineNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// Form1095CUpstreamDetailType class constructor
        /// </summary>
        public Form1095CUpstreamDetailType()
        {
            this._coveredIndividualGrp = new List<EmployerCoveredIndividualType>();
            this._employeeOfferAndCoverageGrp = new EmployeeOfferAndCoverageGrpType();
            this._employeeInfoGrp = new EmployeeInformationGrpType();
            this._correctedRecordInfoGrp = new CorrectedRecordInfoGrpType();
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*")]
        public string RecordId
        {
            get
            {
                return this._recordId;
            }
            set
            {
                this._recordId = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([1-9]|[1-9][0-9])C{0,1}-([0-9]|[1-9][0-9])")]
        public string TestScenarioId
        {
            get
            {
                return this._testScenarioId;
            }
            set
            {
                this._testScenarioId = value;
            }
        }
        
        public DigitBooleanType CorrectedInd
        {
            get
            {
                return this._correctedInd;
            }
            set
            {
                this._correctedInd = value;
            }
        }
        
        public CorrectedRecordInfoGrpType CorrectedRecordInfoGrp
        {
            get
            {
                return this._correctedRecordInfoGrp;
            }
            set
            {
                this._correctedRecordInfoGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]{3}")]
        public string TaxYr
        {
            get
            {
                return this._taxYr;
            }
            set
            {
                this._taxYr = value;
            }
        }
        
        public EmployeeInformationGrpType EmployeeInfoGrp
        {
            get
            {
                return this._employeeInfoGrp;
            }
            set
            {
                this._employeeInfoGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(15, MinimumLength=10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9])*")]
        public string ALEContactPhoneNum
        {
            get
            {
                return this._aLEContactPhoneNum;
            }
            set
            {
                this._aLEContactPhoneNum = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(0[0-9]|1[0-2])")]
        public string StartMonthNumberCd
        {
            get
            {
                return this._startMonthNumberCd;
            }
            set
            {
                this._startMonthNumberCd = value;
            }
        }
        
        public EmployeeOfferAndCoverageGrpType EmployeeOfferAndCoverageGrp
        {
            get
            {
                return this._employeeOfferAndCoverageGrp;
            }
            set
            {
                this._employeeOfferAndCoverageGrp = value;
            }
        }
        
        public DigitBooleanType CoveredIndividualInd
        {
            get
            {
                return this._coveredIndividualInd;
            }
            set
            {
                this._coveredIndividualInd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CoveredIndividualGrp")]
        public List<EmployerCoveredIndividualType> CoveredIndividualGrp
        {
            get
            {
                return this._coveredIndividualGrp;
            }
            set
            {
                this._coveredIndividualGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string recordType
        {
            get
            {
                return this._recordType;
            }
            set
            {
                this._recordType = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string lineNum
        {
            get
            {
                return this._lineNum;
            }
            set
            {
                this._lineNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Form1095CUpstreamDetailType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Form1095CUpstreamDetailType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Form1095CUpstreamDetailType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Form1095CUpstreamDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Form1095CUpstreamDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form1095CUpstreamDetailType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Form1095CUpstreamDetailType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Form1095CUpstreamDetailType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Form1095CUpstreamDetailType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Form1095CUpstreamDetailType Deserialize(System.IO.Stream s)
        {
            return ((Form1095CUpstreamDetailType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Form1095CUpstreamDetailType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Form1095CUpstreamDetailType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Form1095CUpstreamDetailType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Form1095CUpstreamDetailType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Form1095CUpstreamDetailType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Form1095CUpstreamDetailType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Form1095CUpstreamDetailType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Form1095CUpstreamDetailType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static Form1095CUpstreamDetailType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Other ALE Members of Aggregated ALE Group Type102015-01-27Initial versionOther ALE Members of Aggregated ALE Group type at anytime during the year
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class OtherALEMembersType
    {
        
        private BusinessNameType _businessName;
        
        private string _businessNameControlTxt;
        
        private TINRequestTypeCodeType _tINRequestTypeCd;
        
        private string _eIN;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// OtherALEMembersType class constructor
        /// </summary>
        public OtherALEMembersType()
        {
            this._businessName = new BusinessNameType();
        }
        
        public BusinessNameType BusinessName
        {
            get
            {
                return this._businessName;
            }
            set
            {
                this._businessName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Z0-9\\-]|&){1,4}")]
        public string BusinessNameControlTxt
        {
            get
            {
                return this._businessNameControlTxt;
            }
            set
            {
                this._businessNameControlTxt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        public TINRequestTypeCodeType TINRequestTypeCd
        {
            get
            {
                return this._tINRequestTypeCd;
            }
            set
            {
                this._tINRequestTypeCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string EIN
        {
            get
            {
                return this._eIN;
            }
            set
            {
                this._eIN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OtherALEMembersType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OtherALEMembersType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OtherALEMembersType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OtherALEMembersType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OtherALEMembersType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherALEMembersType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out OtherALEMembersType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static OtherALEMembersType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OtherALEMembersType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static OtherALEMembersType Deserialize(System.IO.Stream s)
        {
            return ((OtherALEMembersType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current OtherALEMembersType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OtherALEMembersType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OtherALEMembersType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OtherALEMembersType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherALEMembersType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OtherALEMembersType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OtherALEMembersType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OtherALEMembersType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static OtherALEMembersType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();                                           
                }
            }
        }
    }
    
    /// <summary>
    /// Monthly Applicable Large Employer Group Type102015-01-27Initial versionMonthly Applicable Large Employer Group Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class ALEMemberMonthlyInfoGrpType
    {
        
        private DigitCodeType _minEssentialCvrOffrCd;
        
        private string _aLEMemberFTECnt;
        
        private string _totalEmployeeCnt;
        
        private DigitBooleanType _aggregatedGroupInd;
        
        private string _aLESect4980HTrnstReliefCd;
        
        private static XmlSerializer serializer;
        
        public DigitCodeType MinEssentialCvrOffrCd
        {
            get
            {
                return this._minEssentialCvrOffrCd;
            }
            set
            {
                this._minEssentialCvrOffrCd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string ALEMemberFTECnt
        {
            get
            {
                return this._aLEMemberFTECnt;
            }
            set
            {
                this._aLEMemberFTECnt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string TotalEmployeeCnt
        {
            get
            {
                return this._totalEmployeeCnt;
            }
            set
            {
                this._totalEmployeeCnt = value;
            }
        }
        
        public DigitBooleanType AggregatedGroupInd
        {
            get
            {
                return this._aggregatedGroupInd;
            }
            set
            {
                this._aggregatedGroupInd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(1)]
        public string ALESect4980HTrnstReliefCd
        {
            get
            {
                return this._aLESect4980HTrnstReliefCd;
            }
            set
            {
                this._aLESect4980HTrnstReliefCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ALEMemberMonthlyInfoGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ALEMemberMonthlyInfoGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ALEMemberMonthlyInfoGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ALEMemberMonthlyInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ALEMemberMonthlyInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberMonthlyInfoGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ALEMemberMonthlyInfoGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ALEMemberMonthlyInfoGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ALEMemberMonthlyInfoGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ALEMemberMonthlyInfoGrpType Deserialize(System.IO.Stream s)
        {
            return ((ALEMemberMonthlyInfoGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ALEMemberMonthlyInfoGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ALEMemberMonthlyInfoGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ALEMemberMonthlyInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ALEMemberMonthlyInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberMonthlyInfoGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberMonthlyInfoGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberMonthlyInfoGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ALEMemberMonthlyInfoGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ALEMemberMonthlyInfoGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Digit Code Type102015-08-07Initial VersionType for digit code values, 1 (Yes only), 2 (No only), or 3 (both marked), 0 (Neither)
    /// </summary>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    //public enum DigitCodeType
    //{
        
    //    [System.Xml.Serialization.XmlEnumAttribute("0")]
    //    Item0,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("1")]
    //    Item1,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("2")]
    //    Item2,
        
    //    [System.Xml.Serialization.XmlEnumAttribute("3")]
    //    Item3,
    //}
    
    /// <summary>
    /// Applicable Large Employer Section 4980H Transition Relief Code Type102015-01-27Initial VersionA specific code (A or B) relative to what was entered on Line 22 (Certifications of Eligibility)
    /// </summary>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    //public enum ALESect4980HTrnstReliefCodeType
    //{
        
    //    A,
        
    //    B,
    //}
    
    /// <summary>
    /// Applicable Large Employer Member Annual Information Group Type102015-01-27Initial versionAnnual Applicable Large Employer Member Annual Information Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class ALEMemberAnnualInfoGrpType
    {
        
        private DigitCodeType _minEssentialCvrOffrCd;
        
        private string _aLEMemberFTECnt;
        
        private string _totalEmployeeCnt;
        
        private DigitBooleanType _aggregatedGroupInd;
        
        private string _aLESect4980HTrnstReliefCd;
        
        private static XmlSerializer serializer;
        
        public DigitCodeType MinEssentialCvrOffrCd
        {
            get
            {
                return this._minEssentialCvrOffrCd;
            }
            set
            {
                this._minEssentialCvrOffrCd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string ALEMemberFTECnt
        {
            get
            {
                return this._aLEMemberFTECnt;
            }
            set
            {
                this._aLEMemberFTECnt = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+")]
        public string TotalEmployeeCnt
        {
            get
            {
                return this._totalEmployeeCnt;
            }
            set
            {
                this._totalEmployeeCnt = value;
            }
        }
        
        public DigitBooleanType AggregatedGroupInd
        {
            get
            {
                return this._aggregatedGroupInd;
            }
            set
            {
                this._aggregatedGroupInd = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(1)]
        public string ALESect4980HTrnstReliefCd
        {
            get
            {
                return this._aLESect4980HTrnstReliefCd;
            }
            set
            {
                this._aLESect4980HTrnstReliefCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ALEMemberAnnualInfoGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ALEMemberAnnualInfoGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ALEMemberAnnualInfoGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ALEMemberAnnualInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ALEMemberAnnualInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberAnnualInfoGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ALEMemberAnnualInfoGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ALEMemberAnnualInfoGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ALEMemberAnnualInfoGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ALEMemberAnnualInfoGrpType Deserialize(System.IO.Stream s)
        {
            return ((ALEMemberAnnualInfoGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ALEMemberAnnualInfoGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ALEMemberAnnualInfoGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ALEMemberAnnualInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ALEMemberAnnualInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberAnnualInfoGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberAnnualInfoGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberAnnualInfoGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ALEMemberAnnualInfoGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ALEMemberAnnualInfoGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Applicable Large Employer Member Information Group Type102015-01-27Initial versionApplicable Large Employer Member Information Group Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class ALEMemberInformationGrpType
    {
        
        private ALEMemberAnnualInfoGrpType _yearlyALEMemberDetail;
        
        private ALEMemberMonthlyInfoGrpType _janALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _febALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _marALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _aprALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _mayALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _junALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _julALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _augALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _septALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _octALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _novALEMonthlyInfoGrp;
        
        private ALEMemberMonthlyInfoGrpType _decALEMonthlyInfoGrp;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// ALEMemberInformationGrpType class constructor
        /// </summary>
        public ALEMemberInformationGrpType()
        {
            this._decALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._novALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._octALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._septALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._augALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._julALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._junALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._mayALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._aprALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._marALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._febALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._janALEMonthlyInfoGrp = new ALEMemberMonthlyInfoGrpType();
            this._yearlyALEMemberDetail = new ALEMemberAnnualInfoGrpType();
        }
        
        public ALEMemberAnnualInfoGrpType YearlyALEMemberDetail
        {
            get
            {
                return this._yearlyALEMemberDetail;
            }
            set
            {
                this._yearlyALEMemberDetail = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType JanALEMonthlyInfoGrp
        {
            get
            {
                return this._janALEMonthlyInfoGrp;
            }
            set
            {
                this._janALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType FebALEMonthlyInfoGrp
        {
            get
            {
                return this._febALEMonthlyInfoGrp;
            }
            set
            {
                this._febALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType MarALEMonthlyInfoGrp
        {
            get
            {
                return this._marALEMonthlyInfoGrp;
            }
            set
            {
                this._marALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType AprALEMonthlyInfoGrp
        {
            get
            {
                return this._aprALEMonthlyInfoGrp;
            }
            set
            {
                this._aprALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType MayALEMonthlyInfoGrp
        {
            get
            {
                return this._mayALEMonthlyInfoGrp;
            }
            set
            {
                this._mayALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType JunALEMonthlyInfoGrp
        {
            get
            {
                return this._junALEMonthlyInfoGrp;
            }
            set
            {
                this._junALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType JulALEMonthlyInfoGrp
        {
            get
            {
                return this._julALEMonthlyInfoGrp;
            }
            set
            {
                this._julALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType AugALEMonthlyInfoGrp
        {
            get
            {
                return this._augALEMonthlyInfoGrp;
            }
            set
            {
                this._augALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType SeptALEMonthlyInfoGrp
        {
            get
            {
                return this._septALEMonthlyInfoGrp;
            }
            set
            {
                this._septALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType OctALEMonthlyInfoGrp
        {
            get
            {
                return this._octALEMonthlyInfoGrp;
            }
            set
            {
                this._octALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType NovALEMonthlyInfoGrp
        {
            get
            {
                return this._novALEMonthlyInfoGrp;
            }
            set
            {
                this._novALEMonthlyInfoGrp = value;
            }
        }
        
        public ALEMemberMonthlyInfoGrpType DecALEMonthlyInfoGrp
        {
            get
            {
                return this._decALEMonthlyInfoGrp;
            }
            set
            {
                this._decALEMonthlyInfoGrp = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ALEMemberInformationGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ALEMemberInformationGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ALEMemberInformationGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ALEMemberInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ALEMemberInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberInformationGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ALEMemberInformationGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ALEMemberInformationGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ALEMemberInformationGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ALEMemberInformationGrpType Deserialize(System.IO.Stream s)
        {
            return ((ALEMemberInformationGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ALEMemberInformationGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ALEMemberInformationGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ALEMemberInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ALEMemberInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ALEMemberInformationGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberInformationGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ALEMemberInformationGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ALEMemberInformationGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ALEMemberInformationGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Designated Government Entity Information Group Type102015-01-27Initial versionType of Designated government entity information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class GovtEntityEmployerInfoGrpType
    {
        
        private BusinessNameType _businessName;
        
        private string _businessNameControlTxt;
        
        private TINRequestTypeCodeType _tINRequestTypeCd;
        
        private string _employerEIN;
        
        private BusinessAddressGrpType _mailingAddressGrp;
        
        private OtherCompletePersonNameType _contactNameGrp;
        
        private string _contactPhoneNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// GovtEntityEmployerInfoGrpType class constructor
        /// </summary>
        public GovtEntityEmployerInfoGrpType()
        {
            this._contactNameGrp = new OtherCompletePersonNameType();
            this._mailingAddressGrp = new BusinessAddressGrpType();
            this._businessName = new BusinessNameType();
        }
        
        public BusinessNameType BusinessName
        {
            get
            {
                return this._businessName;
            }
            set
            {
                this._businessName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Z0-9\\-]|&){1,4}")]
        public string BusinessNameControlTxt
        {
            get
            {
                return this._businessNameControlTxt;
            }
            set
            {
                this._businessNameControlTxt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        public TINRequestTypeCodeType TINRequestTypeCd
        {
            get
            {
                return this._tINRequestTypeCd;
            }
            set
            {
                this._tINRequestTypeCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string EmployerEIN
        {
            get
            {
                return this._employerEIN;
            }
            set
            {
                this._employerEIN = value;
            }
        }
        
        public BusinessAddressGrpType MailingAddressGrp
        {
            get
            {
                return this._mailingAddressGrp;
            }
            set
            {
                this._mailingAddressGrp = value;
            }
        }
        
        public OtherCompletePersonNameType ContactNameGrp
        {
            get
            {
                return this._contactNameGrp;
            }
            set
            {
                this._contactNameGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(15, MinimumLength=10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9])*")]
        public string ContactPhoneNum
        {
            get
            {
                return this._contactPhoneNum;
            }
            set
            {
                this._contactPhoneNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GovtEntityEmployerInfoGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GovtEntityEmployerInfoGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GovtEntityEmployerInfoGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GovtEntityEmployerInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GovtEntityEmployerInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GovtEntityEmployerInfoGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out GovtEntityEmployerInfoGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static GovtEntityEmployerInfoGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GovtEntityEmployerInfoGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static GovtEntityEmployerInfoGrpType Deserialize(System.IO.Stream s)
        {
            return ((GovtEntityEmployerInfoGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current GovtEntityEmployerInfoGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GovtEntityEmployerInfoGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GovtEntityEmployerInfoGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GovtEntityEmployerInfoGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GovtEntityEmployerInfoGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GovtEntityEmployerInfoGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out GovtEntityEmployerInfoGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GovtEntityEmployerInfoGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static GovtEntityEmployerInfoGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Employer Information Group Type102015-01-27Initial versionApplicable Large Employer Member Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.31")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:ty16")]
    public partial class EmployerInformationGrpType
    {
        
        private BusinessNameType _businessName;
        
        private string _businessNameControlTxt;
        
        private TINRequestTypeCodeType _tINRequestTypeCd;
        
        private string _employerEIN;
        
        private BusinessAddressGrpType _mailingAddressGrp;
        
        private OtherCompletePersonNameType _contactNameGrp;
        
        private string _contactPhoneNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// EmployerInformationGrpType class constructor
        /// </summary>
        public EmployerInformationGrpType()
        {
            this._contactNameGrp = new OtherCompletePersonNameType();
            this._mailingAddressGrp = new BusinessAddressGrpType();
            this._businessName = new BusinessNameType();
        }
        
        public BusinessNameType BusinessName
        {
            get
            {
                return this._businessName;
            }
            set
            {
                this._businessName = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Z0-9\\-]|&){1,4}")]
        public string BusinessNameControlTxt
        {
            get
            {
                return this._businessNameControlTxt;
            }
            set
            {
                this._businessNameControlTxt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        public TINRequestTypeCodeType TINRequestTypeCd
        {
            get
            {
                return this._tINRequestTypeCd;
            }
            set
            {
                this._tINRequestTypeCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string EmployerEIN
        {
            get
            {
                return this._employerEIN;
            }
            set
            {
                this._employerEIN = value;
            }
        }
        
        public BusinessAddressGrpType MailingAddressGrp
        {
            get
            {
                return this._mailingAddressGrp;
            }
            set
            {
                this._mailingAddressGrp = value;
            }
        }
        
        public OtherCompletePersonNameType ContactNameGrp
        {
            get
            {
                return this._contactNameGrp;
            }
            set
            {
                this._contactNameGrp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(15, MinimumLength=10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9])*")]
        public string ContactPhoneNum
        {
            get
            {
                return this._contactPhoneNum;
            }
            set
            {
                this._contactPhoneNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EmployerInformationGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EmployerInformationGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EmployerInformationGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EmployerInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EmployerInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployerInformationGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out EmployerInformationGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static EmployerInformationGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EmployerInformationGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static EmployerInformationGrpType Deserialize(System.IO.Stream s)
        {
            return ((EmployerInformationGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current EmployerInformationGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EmployerInformationGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EmployerInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EmployerInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EmployerInformationGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EmployerInformationGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EmployerInformationGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EmployerInformationGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static EmployerInformationGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
