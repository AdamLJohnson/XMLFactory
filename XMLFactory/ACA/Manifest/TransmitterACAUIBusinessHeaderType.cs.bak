using VCS.Viewpoint.PR.XmlFactory.Interfaces;

/****************************************************************************  

    Save this comment ---- instructions on how to build this file.
    this is file is created from the tool xsd2code++ it's available as a VS addin.  It gets installed by default in 
         C:\Program Files (x86)\Xsd2Code\xsd2code.exe
   
    The xsd file used to generate this code is the following in TFS
        main\viewpoint\clientside\pr\prcommon\xmlfactory\aca\TaxYear\Schemas\ACA AIR-IEP TY2016 XML LIBRARY 8.7 v1.0\MSG\IRS-ACAUserInterfaceHeaderMessage.xsd
    
    open command window in this directory on your local box
        main\viewpoint\clientside\pr\prcommon\xmlfactory\aca\TaxYear\Schemas\ACA AIR-IEP TY2016 XML LIBRARY 8.7 v1.0\MSG
    
    run this command changing xsd and cs filenames as needed
    "C:\Program Files (x86)\Xsd2Code\xsd2code.exe"  .\IRS-ACAUserInterfaceHeaderMessage.xsd VCS.Viewpoint.XmlFactory.PR.ACA.Manifest.TaxYear IRS-ACAUserInterfaceHeaderMessage.cs /lic .\xsd2code.license /p Net45 /dmnOnlyIfDiff /dmxmli+ /if+ /uct+ /is /xml /encUTF8 /in+ /sm Serialize /dm Deserialize /sf SaveToFile /lf LoadFromFile /expattg /appinfo+ /sc+ /rt+ /rtrange /rtregex /rtstlength /pfnu /xa+ /xao+

    Copy and paste output from IRS-ACAUserInterfaceHeaderMessage.cs and paste below starting at the next comment block
    
    make the following manual changes

        TransmitterACAUIBusinessHeaderType class needs to implement IRootXmlClass interface
        _timestamp & Timestamp property in ACABulkBusinessHeaderRequestType class need to change to string from DateTime


*************************************************************************************/

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//    <NameSpace>VCS.Viewpoint.XmlFactory.PR.ACA.Manifest.Generated</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>True</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>True</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>True</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>True</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>True</sspEnumType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable
namespace VCS.Viewpoint.XmlFactory.PR.ACA.Manifest
{
    using System.Xml.Serialization;
    using System.IO;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Transmitter User Interface Business Header
    /// Request Type202015-04-14Initial VersionTransmitter User Interface Business Header detail
    /// type for 1094-1095B/C Forms Upstream
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:msg:acauibusinessheader")]
    [System.Xml.Serialization.XmlRootAttribute("ACAUIBusinessHeader", Namespace="urn:us:gov:treasury:irs:msg:acauibusinessheader", IsNullable=false)]
    public partial class TransmitterACAUIBusinessHeaderType : IRootXmlClass
    {
        
        private ACABulkBusinessHeaderRequestType _aCABusinessHeader;
        
        private ACATrnsmtManifestReqDtlType _aCATransmitterManifestReqDtl;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// TransmitterACAUIBusinessHeaderType class constructor
        /// </summary>
        public TransmitterACAUIBusinessHeaderType()
        {
            this._aCATransmitterManifestReqDtl = new ACATrnsmtManifestReqDtlType();
            this._aCABusinessHeader = new ACABulkBusinessHeaderRequestType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:msg:acabusinessheader", Order=0)]
        public ACABulkBusinessHeaderRequestType ACABusinessHeader
        {
            get
            {
                return this._aCABusinessHeader;
            }
            set
            {
                this._aCABusinessHeader = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0", Order=1)]
        public ACATrnsmtManifestReqDtlType ACATransmitterManifestReqDtl
        {
            get
            {
                return this._aCATransmitterManifestReqDtl;
            }
            set
            {
                this._aCATransmitterManifestReqDtl = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransmitterACAUIBusinessHeaderType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransmitterACAUIBusinessHeaderType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TransmitterACAUIBusinessHeaderType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransmitterACAUIBusinessHeaderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransmitterACAUIBusinessHeaderType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransmitterACAUIBusinessHeaderType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TransmitterACAUIBusinessHeaderType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TransmitterACAUIBusinessHeaderType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransmitterACAUIBusinessHeaderType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TransmitterACAUIBusinessHeaderType Deserialize(System.IO.Stream s)
        {
            return ((TransmitterACAUIBusinessHeaderType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TransmitterACAUIBusinessHeaderType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TransmitterACAUIBusinessHeaderType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransmitterACAUIBusinessHeaderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransmitterACAUIBusinessHeaderType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransmitterACAUIBusinessHeaderType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TransmitterACAUIBusinessHeaderType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out TransmitterACAUIBusinessHeaderType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TransmitterACAUIBusinessHeaderType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static TransmitterACAUIBusinessHeaderType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Affordable Care Act (ACA) Transmitter Request Business Header Type102015-01-16Initial versionGlobal type for the ACA Transmitter Request Business Header Typel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class ACABulkBusinessHeaderRequestType
    {
        
        private string _uniqueTransmissionId;
        
        private string _timestamp;
        
        private string _id;
        
        private List<System.Xml.XmlAttribute> _anyAttr;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// ACABulkBusinessHeaderRequestType class constructor
        /// </summary>
        public ACABulkBusinessHeaderRequestType()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="token", Order=0)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}:SYS1" +
            "2:[A-Z-[AEIOU]]{2}[A-Z0-9-[AEIOU]]{3}::T)")]
        public string UniqueTransmissionId
        {
            get
            {
                return this._uniqueTransmissionId;
            }
            set
            {
                this._uniqueTransmissionId = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=1)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]{3}\\-.+T[^\\.]+(Z|[\\+\\-].+)")]
        public string Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                this._timestamp = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xs" +
            "d", DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ACABulkBusinessHeaderRequestType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ACABulkBusinessHeaderRequestType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ACABulkBusinessHeaderRequestType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ACABulkBusinessHeaderRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ACABulkBusinessHeaderRequestType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACABulkBusinessHeaderRequestType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ACABulkBusinessHeaderRequestType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ACABulkBusinessHeaderRequestType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ACABulkBusinessHeaderRequestType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ACABulkBusinessHeaderRequestType Deserialize(System.IO.Stream s)
        {
            return ((ACABulkBusinessHeaderRequestType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ACABulkBusinessHeaderRequestType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ACABulkBusinessHeaderRequestType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ACABulkBusinessHeaderRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ACABulkBusinessHeaderRequestType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACABulkBusinessHeaderRequestType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ACABulkBusinessHeaderRequestType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ACABulkBusinessHeaderRequestType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ACABulkBusinessHeaderRequestType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ACABulkBusinessHeaderRequestType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Vendor Information Group Type102014-11-03Initial versionGlobal type for the vendor information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class VendorInformationGrpType
    {
        
        private string _vendorCd;
        
        private OtherCompletePersonNameType _contactNameGrp;
        
        private string _contactPhoneNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// VendorInformationGrpType class constructor
        /// </summary>
        public VendorInformationGrpType()
        {
            this._contactNameGrp = new OtherCompletePersonNameType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[VI]")]
        public string VendorCd
        {
            get
            {
                return this._vendorCd;
            }
            set
            {
                this._vendorCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OtherCompletePersonNameType ContactNameGrp
        {
            get
            {
                return this._contactNameGrp;
            }
            set
            {
                this._contactNameGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(15, MinimumLength=10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9])*")]
        public string ContactPhoneNum
        {
            get
            {
                return this._contactPhoneNum;
            }
            set
            {
                this._contactPhoneNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VendorInformationGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VendorInformationGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an VendorInformationGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VendorInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VendorInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VendorInformationGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out VendorInformationGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static VendorInformationGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((VendorInformationGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static VendorInformationGrpType Deserialize(System.IO.Stream s)
        {
            return ((VendorInformationGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current VendorInformationGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an VendorInformationGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VendorInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out VendorInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VendorInformationGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out VendorInformationGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out VendorInformationGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static VendorInformationGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static VendorInformationGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Other Complete Person Name Type10Initial Version2014-06-04YesActiveGlobal type definition for person's full name where all elements are optional.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class OtherCompletePersonNameType
    {
        
        private string _personFirstNm;
        
        private string _personMiddleNm;
        
        private string _personLastNm;
        
        private string _suffixNm;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z\\-] ?)*[A-Za-z\\-]")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(20)]
        public string PersonFirstNm
        {
            get
            {
                return this._personFirstNm;
            }
            set
            {
                this._personFirstNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z\\-] ?)*[A-Za-z\\-]")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(20)]
        public string PersonMiddleNm
        {
            get
            {
                return this._personMiddleNm;
            }
            set
            {
                this._personMiddleNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z\\-] ?)*[A-Za-z\\-]")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(20)]
        public string PersonLastNm
        {
            get
            {
                return this._personLastNm;
            }
            set
            {
                this._personLastNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z\\-] ?)*[A-Za-z\\-]")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(20)]
        public string SuffixNm
        {
            get
            {
                return this._suffixNm;
            }
            set
            {
                this._suffixNm = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OtherCompletePersonNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OtherCompletePersonNameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OtherCompletePersonNameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OtherCompletePersonNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherCompletePersonNameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out OtherCompletePersonNameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static OtherCompletePersonNameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OtherCompletePersonNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static OtherCompletePersonNameType Deserialize(System.IO.Stream s)
        {
            return ((OtherCompletePersonNameType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current OtherCompletePersonNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OtherCompletePersonNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OtherCompletePersonNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherCompletePersonNameType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OtherCompletePersonNameType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OtherCompletePersonNameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OtherCompletePersonNameType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static OtherCompletePersonNameType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Foreign Address Group Type102013-01-25Initial versionA group that wraps detail associated with a generic foreign address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class ForeignAddressGrpType
    {
        
        private string _addressLine1Txt;
        
        private string _addressLine2Txt;
        
        private string _cityNm;
        
        private object _item;
        
        private string _foreignProvinceNm;
        
        private string _foreignPostalCd;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine1Txt
        {
            get
            {
                return this._addressLine1Txt;
            }
            set
            {
                this._addressLine1Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine2Txt
        {
            get
            {
                return this._addressLine2Txt;
            }
            set
            {
                this._addressLine2Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=2)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(22)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z] ?)*[A-Za-z]")]
        public string CityNm
        {
            get
            {
                return this._cityNm;
            }
            set
            {
                this._cityNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryCd", typeof(CountryType), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("CountryNm", typeof(string), Order=3)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\.\\-/\'])*")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(17)]
        public string ForeignProvinceNm
        {
            get
            {
                return this._foreignProvinceNm;
            }
            set
            {
                this._foreignProvinceNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\.\\-/])*")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16)]
        public string ForeignPostalCd
        {
            get
            {
                return this._foreignPostalCd;
            }
            set
            {
                this._foreignPostalCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ForeignAddressGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ForeignAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ForeignAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ForeignAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ForeignAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ForeignAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ForeignAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ForeignAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ForeignAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((ForeignAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ForeignAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ForeignAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ForeignAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ForeignAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ForeignAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ForeignAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ForeignAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ForeignAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Country abbreviations, a.k.a. country codes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public enum CountryType
    {
        
        /// <summary>
        /// Afghanistan
        /// </summary>
        AF,
        
        /// <summary>
        /// Akrotiri
        /// </summary>
        AX,
        
        /// <summary>
        /// Albania
        /// </summary>
        AL,
        
        /// <summary>
        /// Algeria
        /// </summary>
        AG,
        
        /// <summary>
        /// American Samoa
        /// </summary>
        AQ,
        
        /// <summary>
        /// Andorra
        /// </summary>
        AN,
        
        /// <summary>
        /// Angola
        /// </summary>
        AO,
        
        /// <summary>
        /// Anguilla
        /// </summary>
        AV,
        
        /// <summary>
        /// Antarctica
        /// </summary>
        AY,
        
        /// <summary>
        /// Antigua and Barbuda
        /// </summary>
        AC,
        
        /// <summary>
        /// Argentina
        /// </summary>
        AR,
        
        /// <summary>
        /// Armenia
        /// </summary>
        AM,
        
        /// <summary>
        /// Aruba
        /// </summary>
        AA,
        
        /// <summary>
        /// Ashmore and Cartier Islands
        /// </summary>
        AT,
        
        /// <summary>
        /// Australia
        /// </summary>
        AS,
        
        /// <summary>
        /// Austria
        /// </summary>
        AU,
        
        /// <summary>
        /// Azerbaijan
        /// </summary>
        AJ,
        
        /// <summary>
        /// Bahamas
        /// </summary>
        BF,
        
        /// <summary>
        /// Bahrain
        /// </summary>
        BA,
        
        /// <summary>
        /// Baker Island
        /// </summary>
        FQ,
        
        /// <summary>
        /// Bangladesh
        /// </summary>
        BG,
        
        /// <summary>
        /// Barbados
        /// </summary>
        BB,
        
        /// <summary>
        /// Belarus
        /// </summary>
        BO,
        
        /// <summary>
        /// Belgium
        /// </summary>
        BE,
        
        /// <summary>
        /// Belize
        /// </summary>
        BH,
        
        /// <summary>
        /// Benin
        /// </summary>
        BN,
        
        /// <summary>
        /// Bermuda
        /// </summary>
        BD,
        
        /// <summary>
        /// Bhutan
        /// </summary>
        BT,
        
        /// <summary>
        /// Bolivia
        /// </summary>
        BL,
        
        /// <summary>
        /// Bosnia-Herzegovina
        /// </summary>
        BK,
        
        /// <summary>
        /// Botswana
        /// </summary>
        BC,
        
        /// <summary>
        /// Bouvet Island
        /// </summary>
        BV,
        
        /// <summary>
        /// Brazil
        /// </summary>
        BR,
        
        /// <summary>
        /// British Indian Ocean Territory
        /// </summary>
        IO,
        
        /// <summary>
        /// British Virgin Islands
        /// </summary>
        VI,
        
        /// <summary>
        /// Brunei
        /// </summary>
        BX,
        
        /// <summary>
        /// Bulgaria
        /// </summary>
        BU,
        
        /// <summary>
        /// Burkina Faso
        /// </summary>
        UV,
        
        /// <summary>
        /// Burma
        /// </summary>
        BM,
        
        /// <summary>
        /// Burundi
        /// </summary>
        BY,
        
        /// <summary>
        /// Cambodia
        /// </summary>
        CB,
        
        /// <summary>
        /// Cameroon
        /// </summary>
        CM,
        
        /// <summary>
        /// Canada
        /// </summary>
        CA,
        
        /// <summary>
        /// Cape Verde
        /// </summary>
        CV,
        
        /// <summary>
        /// Cayman Islands
        /// </summary>
        CJ,
        
        /// <summary>
        /// Central African Republic
        /// </summary>
        CT,
        
        /// <summary>
        /// Chad
        /// </summary>
        CD,
        
        /// <summary>
        /// Chile
        /// </summary>
        CI,
        
        /// <summary>
        /// China
        /// </summary>
        CH,
        
        /// <summary>
        /// Christmas Island
        /// </summary>
        KT,
        
        /// <summary>
        /// Clipperton Island
        /// </summary>
        IP,
        
        /// <summary>
        /// Cocos (Keeling) Islands
        /// </summary>
        CK,
        
        /// <summary>
        /// Colombia
        /// </summary>
        CO,
        
        /// <summary>
        /// Comoros
        /// </summary>
        CN,
        
        /// <summary>
        /// Congo (Brazzaville)
        /// </summary>
        CF,
        
        /// <summary>
        /// Congo (Kinshasa)
        /// </summary>
        CG,
        
        /// <summary>
        /// Cook Islands
        /// </summary>
        CW,
        
        /// <summary>
        /// Coral Sea Islands
        /// </summary>
        CR,
        
        /// <summary>
        /// Costa Rica
        /// </summary>
        CS,
        
        /// <summary>
        /// Cote D'Ivoire (Ivory Coast)
        /// </summary>
        IV,
        
        /// <summary>
        /// Croatia
        /// </summary>
        HR,
        
        /// <summary>
        /// Cuba
        /// </summary>
        CU,
        
        /// <summary>
        /// Curacao
        /// </summary>
        UC,
        
        /// <summary>
        /// Cyprus
        /// </summary>
        CY,
        
        /// <summary>
        /// Czech Republic
        /// </summary>
        EZ,
        
        /// <summary>
        /// Denmark
        /// </summary>
        DA,
        
        /// <summary>
        /// Dhekelia
        /// </summary>
        DX,
        
        /// <summary>
        /// Djibouti
        /// </summary>
        DJ,
        
        /// <summary>
        /// Dominica
        /// </summary>
        DO,
        
        /// <summary>
        /// Dominican Republic
        /// </summary>
        DR,
        
        /// <summary>
        /// East Timor
        /// </summary>
        TT,
        
        /// <summary>
        /// Ecuador
        /// </summary>
        EC,
        
        /// <summary>
        /// Egypt
        /// </summary>
        EG,
        
        /// <summary>
        /// El Salvador
        /// </summary>
        ES,
        
        /// <summary>
        /// Equatorial Guinea
        /// </summary>
        EK,
        
        /// <summary>
        /// Eritrea
        /// </summary>
        ER,
        
        /// <summary>
        /// Estonia
        /// </summary>
        EN,
        
        /// <summary>
        /// Ethiopia
        /// </summary>
        ET,
        
        /// <summary>
        /// Falkland Islands (Islas Malvinas)
        /// </summary>
        FK,
        
        /// <summary>
        /// Faroe Islands
        /// </summary>
        FO,
        
        /// <summary>
        /// Federated States of Micronesia
        /// </summary>
        FM,
        
        /// <summary>
        /// Fiji
        /// </summary>
        FJ,
        
        /// <summary>
        /// Finland
        /// </summary>
        FI,
        
        /// <summary>
        /// France
        /// </summary>
        FR,
        
        /// <summary>
        /// French Polynesia
        /// </summary>
        FP,
        
        /// <summary>
        /// French Southern and Antarctic Lands
        /// </summary>
        FS,
        
        /// <summary>
        /// Gabon
        /// </summary>
        GB,
        
        /// <summary>
        /// The Gambia
        /// </summary>
        GA,
        
        /// <summary>
        /// Georgia
        /// </summary>
        GG,
        
        /// <summary>
        /// Germany
        /// </summary>
        GM,
        
        /// <summary>
        /// Ghana
        /// </summary>
        GH,
        
        /// <summary>
        /// Gibraltar
        /// </summary>
        GI,
        
        /// <summary>
        /// Greece
        /// </summary>
        GR,
        
        /// <summary>
        /// Greenland
        /// </summary>
        GL,
        
        /// <summary>
        /// Grenada
        /// </summary>
        GJ,
        
        /// <summary>
        /// Guam
        /// </summary>
        GQ,
        
        /// <summary>
        /// Guatemala
        /// </summary>
        GT,
        
        /// <summary>
        /// Guernsey
        /// </summary>
        GK,
        
        /// <summary>
        /// Guinea
        /// </summary>
        GV,
        
        /// <summary>
        /// Guinea-Bissau
        /// </summary>
        PU,
        
        /// <summary>
        /// Guyana
        /// </summary>
        GY,
        
        /// <summary>
        /// Haiti
        /// </summary>
        HA,
        
        /// <summary>
        /// Heard Island and McDonald Islands
        /// </summary>
        HM,
        
        /// <summary>
        /// Holy See
        /// </summary>
        VT,
        
        /// <summary>
        /// Honduras
        /// </summary>
        HO,
        
        /// <summary>
        /// Hong Kong
        /// </summary>
        HK,
        
        /// <summary>
        /// Howland Island
        /// </summary>
        HQ,
        
        /// <summary>
        /// Hungary
        /// </summary>
        HU,
        
        /// <summary>
        /// Iceland
        /// </summary>
        IC,
        
        /// <summary>
        /// India
        /// </summary>
        IN,
        
        /// <summary>
        /// Indonesia
        /// </summary>
        ID,
        
        /// <summary>
        /// Iran
        /// </summary>
        IR,
        
        /// <summary>
        /// Iraq
        /// </summary>
        IZ,
        
        /// <summary>
        /// Ireland
        /// </summary>
        EI,
        
        /// <summary>
        /// Israel
        /// </summary>
        IS,
        
        /// <summary>
        /// Italy
        /// </summary>
        IT,
        
        /// <summary>
        /// Jamaica
        /// </summary>
        JM,
        
        /// <summary>
        /// Jan Mayen
        /// </summary>
        JN,
        
        /// <summary>
        /// Japan
        /// </summary>
        JA,
        
        /// <summary>
        /// Jarvis Island
        /// </summary>
        DQ,
        
        /// <summary>
        /// Jersey
        /// </summary>
        JE,
        
        /// <summary>
        /// Johnston Atoll
        /// </summary>
        JQ,
        
        /// <summary>
        /// Jordan
        /// </summary>
        JO,
        
        /// <summary>
        /// Kazakhstan
        /// </summary>
        KZ,
        
        /// <summary>
        /// Kenya
        /// </summary>
        KE,
        
        /// <summary>
        /// Kingman Reef
        /// </summary>
        KQ,
        
        /// <summary>
        /// Kiribati
        /// </summary>
        KR,
        
        /// <summary>
        /// Korea, Democratic People's Republic of (North)
        /// </summary>
        KN,
        
        /// <summary>
        /// Korea, Republic of (South)
        /// </summary>
        KS,
        
        /// <summary>
        /// Kosovo
        /// </summary>
        KV,
        
        /// <summary>
        /// Kuwait
        /// </summary>
        KU,
        
        /// <summary>
        /// Kyrgyzstan
        /// </summary>
        KG,
        
        /// <summary>
        /// Laos
        /// </summary>
        LA,
        
        /// <summary>
        /// Latvia
        /// </summary>
        LG,
        
        /// <summary>
        /// Lebanon
        /// </summary>
        LE,
        
        /// <summary>
        /// Lesotho
        /// </summary>
        LT,
        
        /// <summary>
        /// Liberia
        /// </summary>
        LI,
        
        /// <summary>
        /// Libya
        /// </summary>
        LY,
        
        /// <summary>
        /// Liechtenstein
        /// </summary>
        LS,
        
        /// <summary>
        /// Lithuania
        /// </summary>
        LH,
        
        /// <summary>
        /// Luxembourg
        /// </summary>
        LU,
        
        /// <summary>
        /// Macau
        /// </summary>
        MC,
        
        /// <summary>
        /// Macedonia
        /// </summary>
        MK,
        
        /// <summary>
        /// Madagascar
        /// </summary>
        MA,
        
        /// <summary>
        /// Malawi
        /// </summary>
        MI,
        
        /// <summary>
        /// Malaysia
        /// </summary>
        MY,
        
        /// <summary>
        /// Maldives
        /// </summary>
        MV,
        
        /// <summary>
        /// Mali
        /// </summary>
        ML,
        
        /// <summary>
        /// Malta
        /// </summary>
        MT,
        
        /// <summary>
        /// Man, Isle of
        /// </summary>
        IM,
        
        /// <summary>
        /// Marshall Islands
        /// </summary>
        RM,
        
        /// <summary>
        /// Mauritania
        /// </summary>
        MR,
        
        /// <summary>
        /// Mauritius
        /// </summary>
        MP,
        
        /// <summary>
        /// Mexico
        /// </summary>
        MX,
        
        /// <summary>
        /// Midway Islands
        /// </summary>
        MQ,
        
        /// <summary>
        /// Moldova
        /// </summary>
        MD,
        
        /// <summary>
        /// Monaco
        /// </summary>
        MN,
        
        /// <summary>
        /// Mongolia
        /// </summary>
        MG,
        
        /// <summary>
        /// Montenegro
        /// </summary>
        MJ,
        
        /// <summary>
        /// Montserrat
        /// </summary>
        MH,
        
        /// <summary>
        /// Morocco
        /// </summary>
        MO,
        
        /// <summary>
        /// Mozambique
        /// </summary>
        MZ,
        
        /// <summary>
        /// Namibia
        /// </summary>
        WA,
        
        /// <summary>
        /// Nauru
        /// </summary>
        NR,
        
        /// <summary>
        /// Navassa Island
        /// </summary>
        BQ,
        
        /// <summary>
        /// Nepal
        /// </summary>
        NP,
        
        /// <summary>
        /// Netherlands
        /// </summary>
        NL,
        
        /// <summary>
        /// New Caledonia
        /// </summary>
        NC,
        
        /// <summary>
        /// New Zealand
        /// </summary>
        NZ,
        
        /// <summary>
        /// Nicaragua
        /// </summary>
        NU,
        
        /// <summary>
        /// Niger
        /// </summary>
        NG,
        
        /// <summary>
        /// Nigeria
        /// </summary>
        NI,
        
        /// <summary>
        /// Niue
        /// </summary>
        NE,
        
        /// <summary>
        /// Norfolk Island
        /// </summary>
        NF,
        
        /// <summary>
        /// Northern Mariana Islands
        /// </summary>
        CQ,
        
        /// <summary>
        /// Norway
        /// </summary>
        NO,
        
        /// <summary>
        /// Oman
        /// </summary>
        MU,
        
        /// <summary>
        /// Other Country
        /// </summary>
        OC,
        
        /// <summary>
        /// Pakistan
        /// </summary>
        PK,
        
        /// <summary>
        /// Palau
        /// </summary>
        PS,
        
        /// <summary>
        /// Palmyra Atoll
        /// </summary>
        LQ,
        
        /// <summary>
        /// Panama
        /// </summary>
        PM,
        
        /// <summary>
        /// Papua-New Guinea
        /// </summary>
        PP,
        
        /// <summary>
        /// Paracel Islands
        /// </summary>
        PF,
        
        /// <summary>
        /// Paraguay
        /// </summary>
        PA,
        
        /// <summary>
        /// Peru
        /// </summary>
        PE,
        
        /// <summary>
        /// Philippines
        /// </summary>
        RP,
        
        /// <summary>
        /// Pitcairn Islands
        /// </summary>
        PC,
        
        /// <summary>
        /// Poland
        /// </summary>
        PL,
        
        /// <summary>
        /// Portugal
        /// </summary>
        PO,
        
        /// <summary>
        /// Puerto Rico
        /// </summary>
        RQ,
        
        /// <summary>
        /// Qatar
        /// </summary>
        QA,
        
        /// <summary>
        /// Romania
        /// </summary>
        RO,
        
        /// <summary>
        /// Russia
        /// </summary>
        RS,
        
        /// <summary>
        /// Rwanda
        /// </summary>
        RW,
        
        /// <summary>
        /// Saint Barthelemy
        /// </summary>
        TB,
        
        /// <summary>
        /// Saint Martin
        /// </summary>
        RN,
        
        /// <summary>
        /// Samoa
        /// </summary>
        WS,
        
        /// <summary>
        /// San Marino
        /// </summary>
        SM,
        
        /// <summary>
        /// Sao Tome and Principe
        /// </summary>
        TP,
        
        /// <summary>
        /// Saudi Arabia
        /// </summary>
        SA,
        
        /// <summary>
        /// Senegal
        /// </summary>
        SG,
        
        /// <summary>
        /// Serbia
        /// </summary>
        RI,
        
        /// <summary>
        /// Seychelles
        /// </summary>
        SE,
        
        /// <summary>
        /// Sierra Leone
        /// </summary>
        SL,
        
        /// <summary>
        /// Singapore
        /// </summary>
        SN,
        
        /// <summary>
        /// Sint Maarten
        /// </summary>
        NN,
        
        /// <summary>
        /// Slovakia
        /// </summary>
        LO,
        
        /// <summary>
        /// Slovenia
        /// </summary>
        SI,
        
        /// <summary>
        /// Solomon Islands
        /// </summary>
        BP,
        
        /// <summary>
        /// Somalia
        /// </summary>
        SO,
        
        /// <summary>
        /// South Africa
        /// </summary>
        SF,
        
        /// <summary>
        /// South Georgia and the South Sandwich Islands
        /// </summary>
        SX,
        
        /// <summary>
        /// South Sudan
        /// </summary>
        OD,
        
        /// <summary>
        /// Spain
        /// </summary>
        SP,
        
        /// <summary>
        /// Spratly Islands
        /// </summary>
        PG,
        
        /// <summary>
        /// Sri Lanka
        /// </summary>
        CE,
        
        /// <summary>
        /// St. Helena
        /// </summary>
        SH,
        
        /// <summary>
        /// St. Kitts and Nevis
        /// </summary>
        SC,
        
        /// <summary>
        /// St. Lucia Island
        /// </summary>
        ST,
        
        /// <summary>
        /// St. Pierre and Miquelon
        /// </summary>
        SB,
        
        /// <summary>
        /// St. Vincent and the Grenadines
        /// </summary>
        VC,
        
        /// <summary>
        /// Sudan
        /// </summary>
        SU,
        
        /// <summary>
        /// Suriname
        /// </summary>
        NS,
        
        /// <summary>
        /// Svalbard
        /// </summary>
        SV,
        
        /// <summary>
        /// Swaziland
        /// </summary>
        WZ,
        
        /// <summary>
        /// Sweden
        /// </summary>
        SW,
        
        /// <summary>
        /// Switzerland
        /// </summary>
        SZ,
        
        /// <summary>
        /// Syria
        /// </summary>
        SY,
        
        /// <summary>
        /// Taiwan
        /// </summary>
        TW,
        
        /// <summary>
        /// Tajikistan
        /// </summary>
        TI,
        
        /// <summary>
        /// Tanzania
        /// </summary>
        TZ,
        
        /// <summary>
        /// Thailand
        /// </summary>
        TH,
        
        /// <summary>
        /// Togo
        /// </summary>
        TO,
        
        /// <summary>
        /// Tokelau
        /// </summary>
        TL,
        
        /// <summary>
        /// Tonga
        /// </summary>
        TN,
        
        /// <summary>
        /// Trinidad and Tobago
        /// </summary>
        TD,
        
        /// <summary>
        /// Tunisia
        /// </summary>
        TS,
        
        /// <summary>
        /// Turkey
        /// </summary>
        TU,
        
        /// <summary>
        /// Turkmenistan
        /// </summary>
        TX,
        
        /// <summary>
        /// Turks and Caicos Islands
        /// </summary>
        TK,
        
        /// <summary>
        /// Tuvalu
        /// </summary>
        TV,
        
        /// <summary>
        /// Uganda
        /// </summary>
        UG,
        
        /// <summary>
        /// Ukraine
        /// </summary>
        UP,
        
        /// <summary>
        /// United Arab Emirates
        /// </summary>
        AE,
        
        /// <summary>
        /// United Kingdom (England, Northern Ireland, Scotland, and Wales)
        /// </summary>
        UK,
        
        /// <summary>
        /// Uruguay
        /// </summary>
        UY,
        
        /// <summary>
        /// Uzbekistan
        /// </summary>
        UZ,
        
        /// <summary>
        /// Vanuatu
        /// </summary>
        NH,
        
        /// <summary>
        /// Venezuela
        /// </summary>
        VE,
        
        /// <summary>
        /// Vietnam
        /// </summary>
        VM,
        
        /// <summary>
        /// Virgin Islands
        /// </summary>
        VQ,
        
        /// <summary>
        /// Wake Island
        /// </summary>
        WQ,
        
        /// <summary>
        /// Wallis and Futuna
        /// </summary>
        WF,
        
        /// <summary>
        /// Western Sahara
        /// </summary>
        WI,
        
        /// <summary>
        /// Yemen (Aden)
        /// </summary>
        YM,
        
        /// <summary>
        /// Zambia
        /// </summary>
        ZA,
        
        /// <summary>
        /// Zimbabwe
        /// </summary>
        ZI,
    }
    
    /// <summary>
    /// US Address Group Type102008-01-08Initial VersionType for a Exchange Periodic Data person address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class USAddressGrpType
    {
        
        private bool _shouldSerializeUSStateCd;
        
        private string _addressLine1Txt;
        
        private string _addressLine2Txt;
        
        private string _cityNm;
        
        private StateType _uSStateCd;
        
        private string _uSZIPCd;
        
        private string _uSZIPExtensionCd;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine1Txt
        {
            get
            {
                return this._addressLine1Txt;
            }
            set
            {
                this._addressLine1Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Za-z0-9]( ?[A-Za-z0-9\\-/])*")]
        public string AddressLine2Txt
        {
            get
            {
                return this._addressLine2Txt;
            }
            set
            {
                this._addressLine2Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=2)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(22)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z] ?)*[A-Za-z]")]
        public string CityNm
        {
            get
            {
                return this._cityNm;
            }
            set
            {
                this._cityNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public StateType USStateCd
        {
            get
            {
                return this._uSStateCd;
            }
            set
            {
                this._uSStateCd = value;
                _shouldSerializeUSStateCd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=4)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{5}")]
        public string USZIPCd
        {
            get
            {
                return this._uSZIPCd;
            }
            set
            {
                this._uSZIPCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=5)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{4}")]
        public string USZIPExtensionCd
        {
            get
            {
                return this._uSZIPExtensionCd;
            }
            set
            {
                this._uSZIPExtensionCd = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(USAddressGrpType));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether USStateCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUSStateCd()
        {
            if (_shouldSerializeUSStateCd)
            {
                return true;
            }
            return (_uSStateCd != default(StateType));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current USAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an USAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output USAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out USAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out USAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static USAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((USAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static USAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((USAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current USAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an USAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output USAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out USAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(USAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out USAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out USAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static USAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static USAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// State Type102015-05-19MeF EFileTypesOne of the 50 states of the United States, a territory of the United States, the District of Columbia, or an APO/FPO/DPO (Military) designation.  These are each designated by a unique 2 character code assigned by the US Post Office.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public enum StateType
    {
        
        /// <summary>
        /// Alabama
        /// </summary>
        AL,
        
        /// <summary>
        /// Alaska
        /// </summary>
        AK,
        
        /// <summary>
        /// American Samoa
        /// </summary>
        AS,
        
        /// <summary>
        /// Arizona
        /// </summary>
        AZ,
        
        /// <summary>
        /// Arkansas
        /// </summary>
        AR,
        
        /// <summary>
        /// California
        /// </summary>
        CA,
        
        /// <summary>
        /// Colorado
        /// </summary>
        CO,
        
        /// <summary>
        /// Commonwealth of the Northern Mariana Islands
        /// </summary>
        MP,
        
        /// <summary>
        /// Connecticut
        /// </summary>
        CT,
        
        /// <summary>
        /// Delaware
        /// </summary>
        DE,
        
        /// <summary>
        /// District of Columbia
        /// </summary>
        DC,
        
        /// <summary>
        /// Federated States of Micronesia
        /// </summary>
        FM,
        
        /// <summary>
        /// Florida
        /// </summary>
        FL,
        
        /// <summary>
        /// Georgia
        /// </summary>
        GA,
        
        /// <summary>
        /// Guam
        /// </summary>
        GU,
        
        /// <summary>
        /// Hawaii
        /// </summary>
        HI,
        
        /// <summary>
        /// Idaho
        /// </summary>
        ID,
        
        /// <summary>
        /// Illinois
        /// </summary>
        IL,
        
        /// <summary>
        /// Indiana
        /// </summary>
        IN,
        
        /// <summary>
        /// Iowa
        /// </summary>
        IA,
        
        /// <summary>
        /// Kansas
        /// </summary>
        KS,
        
        /// <summary>
        /// Kentucky
        /// </summary>
        KY,
        
        /// <summary>
        /// Louisiana
        /// </summary>
        LA,
        
        /// <summary>
        /// Maine
        /// </summary>
        ME,
        
        /// <summary>
        /// Marshall Islands
        /// </summary>
        MH,
        
        /// <summary>
        /// Maryland
        /// </summary>
        MD,
        
        /// <summary>
        /// Massachusetts
        /// </summary>
        MA,
        
        /// <summary>
        /// Michigan
        /// </summary>
        MI,
        
        /// <summary>
        /// Minnesota
        /// </summary>
        MN,
        
        /// <summary>
        /// Mississippi
        /// </summary>
        MS,
        
        /// <summary>
        /// Missouri
        /// </summary>
        MO,
        
        /// <summary>
        /// Montana
        /// </summary>
        MT,
        
        /// <summary>
        /// Nebraska
        /// </summary>
        NE,
        
        /// <summary>
        /// Nevada
        /// </summary>
        NV,
        
        /// <summary>
        /// New Hampshire
        /// </summary>
        NH,
        
        /// <summary>
        /// New Jersey
        /// </summary>
        NJ,
        
        /// <summary>
        /// New Mexico
        /// </summary>
        NM,
        
        /// <summary>
        /// New York
        /// </summary>
        NY,
        
        /// <summary>
        /// North Carolina
        /// </summary>
        NC,
        
        /// <summary>
        /// North Dakota
        /// </summary>
        ND,
        
        /// <summary>
        /// Ohio
        /// </summary>
        OH,
        
        /// <summary>
        /// Oklahoma
        /// </summary>
        OK,
        
        /// <summary>
        /// Oregon
        /// </summary>
        OR,
        
        /// <summary>
        /// Palau
        /// </summary>
        PW,
        
        /// <summary>
        /// Pennsylvania
        /// </summary>
        PA,
        
        /// <summary>
        /// Puerto Rico
        /// </summary>
        PR,
        
        /// <summary>
        /// Rhode Island
        /// </summary>
        RI,
        
        /// <summary>
        /// South Carolina
        /// </summary>
        SC,
        
        /// <summary>
        /// South Dakota
        /// </summary>
        SD,
        
        /// <summary>
        /// Tennessee
        /// </summary>
        TN,
        
        /// <summary>
        /// Texas
        /// </summary>
        TX,
        
        /// <summary>
        /// U.S. Virgin Islands
        /// </summary>
        VI,
        
        /// <summary>
        /// Utah
        /// </summary>
        UT,
        
        /// <summary>
        /// Vermont
        /// </summary>
        VT,
        
        /// <summary>
        /// Virginia
        /// </summary>
        VA,
        
        /// <summary>
        /// Washington
        /// </summary>
        WA,
        
        /// <summary>
        /// West Virginia
        /// </summary>
        WV,
        
        /// <summary>
        /// Wisconsin
        /// </summary>
        WI,
        
        /// <summary>
        /// Wyoming
        /// </summary>
        WY,
        
        /// <summary>
        /// Armed Forces the Americas
        /// </summary>
        AA,
        
        /// <summary>
        /// Armed Forces Europe
        /// </summary>
        AE,
        
        /// <summary>
        /// Armed Forces Pacific
        /// </summary>
        AP,
    }
    
    /// <summary>
    /// Business Address Group Type102008-01-08Initial VersionType for a Exchange Periodic Data Business address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class BusinessAddressGrpType
    {
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ForeignAddressGrp", typeof(ForeignAddressGrpType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("USAddressGrp", typeof(USAddressGrpType), Order=0)]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BusinessAddressGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BusinessAddressGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BusinessAddressGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BusinessAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessAddressGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BusinessAddressGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BusinessAddressGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BusinessAddressGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BusinessAddressGrpType Deserialize(System.IO.Stream s)
        {
            return ((BusinessAddressGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BusinessAddressGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BusinessAddressGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BusinessAddressGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessAddressGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BusinessAddressGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BusinessAddressGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BusinessAddressGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static BusinessAddressGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Company Information Group Type102014-11-06Initial versionGlobal type for the Company Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class CompanyInformationGrpType
    {
        
        private string _companyNm;
        
        private BusinessAddressGrpType _mailingAddressGrp;
        
        private OtherCompletePersonNameType _contactNameGrp;
        
        private string _contactPhoneNum;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// CompanyInformationGrpType class constructor
        /// </summary>
        public CompanyInformationGrpType()
        {
            this._contactNameGrp = new OtherCompletePersonNameType();
            this._mailingAddressGrp = new BusinessAddressGrpType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(80)]
        public string CompanyNm
        {
            get
            {
                return this._companyNm;
            }
            set
            {
                this._companyNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public BusinessAddressGrpType MailingAddressGrp
        {
            get
            {
                return this._mailingAddressGrp;
            }
            set
            {
                this._mailingAddressGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public OtherCompletePersonNameType ContactNameGrp
        {
            get
            {
                return this._contactNameGrp;
            }
            set
            {
                this._contactNameGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(15, MinimumLength=10)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([0-9])*")]
        public string ContactPhoneNum
        {
            get
            {
                return this._contactPhoneNum;
            }
            set
            {
                this._contactPhoneNum = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CompanyInformationGrpType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CompanyInformationGrpType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CompanyInformationGrpType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CompanyInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CompanyInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CompanyInformationGrpType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CompanyInformationGrpType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CompanyInformationGrpType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CompanyInformationGrpType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CompanyInformationGrpType Deserialize(System.IO.Stream s)
        {
            return ((CompanyInformationGrpType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CompanyInformationGrpType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CompanyInformationGrpType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CompanyInformationGrpType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CompanyInformationGrpType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CompanyInformationGrpType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CompanyInformationGrpType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CompanyInformationGrpType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CompanyInformationGrpType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static CompanyInformationGrpType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Business Name Type102008-01-08EFileTypes, December 14, 2007Type for a Business Name, 2 Name Lines
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class BusinessNameType
    {
        
        private string _businessNameLine1Txt;
        
        private string _businessNameLine2Txt;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(75)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z0-9\\-\\(\\)&\'] ?)*[A-Za-z0-9\\-\\(\\)&\']")]
        public string BusinessNameLine1Txt
        {
            get
            {
                return this._businessNameLine1Txt;
            }
            set
            {
                this._businessNameLine1Txt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(75)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([A-Za-z0-9\\-\\(\\)&\'] ?)*[A-Za-z0-9\\-\\(\\)&\']")]
        public string BusinessNameLine2Txt
        {
            get
            {
                return this._businessNameLine2Txt;
            }
            set
            {
                this._businessNameLine2Txt = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BusinessNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BusinessNameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BusinessNameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BusinessNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BusinessNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessNameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BusinessNameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BusinessNameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BusinessNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BusinessNameType Deserialize(System.IO.Stream s)
        {
            return ((BusinessNameType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BusinessNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BusinessNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BusinessNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BusinessNameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BusinessNameType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BusinessNameType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BusinessNameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BusinessNameType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static BusinessNameType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Affordable Care Act (ACA) Transmitter Request Manifest Detail Type102014-11-03Initial versionGlobal type for the ACA Transmitter Request Manifest Detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public partial class ACATrnsmtManifestReqDtlType
    {
        
        private bool _shouldSerializeBinaryFormatCd;
        
        private bool _shouldSerializeFormTypeCd;
        
        private bool _shouldSerializeTransmitterForeignEntityInd;
        
        private bool _shouldSerializeTransmissionTypeCd;
        
        private bool _shouldSerializePriorYearDataInd;
        
        private string _paymentYr;
        
        private DigitBooleanType _priorYearDataInd;
        
        private string _eIN;
        
        private TransmissionTypeCdType _transmissionTypeCd;
        
        private string _testFileCd;
        
        private string _originalReceiptId;
        
        private DigitBooleanType _transmitterForeignEntityInd;
        
        private BusinessNameType _transmitterNameGrp;
        
        private CompanyInformationGrpType _companyInformationGrp;
        
        private VendorInformationGrpType _vendorInformationGrp;
        
        private string _totalPayeeRecordCnt;
        
        private string _totalPayerRecordCnt;
        
        private string _softwareId;
        
        private FormNameType _formTypeCd;
        
        private BinaryFormatCodeType _binaryFormatCd;
        
        private string _checksumAugmentationNum;
        
        private string _attachmentByteSizeNum;
        
        private string _documentSystemFileNm;
        
        private string _id;
        
        private List<System.Xml.XmlAttribute> _anyAttr;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// ACATrnsmtManifestReqDtlType class constructor
        /// </summary>
        public ACATrnsmtManifestReqDtlType()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
            this._vendorInformationGrp = new VendorInformationGrpType();
            this._companyInformationGrp = new CompanyInformationGrpType();
            this._transmitterNameGrp = new BusinessNameType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="gYear", Order=0)]
        public string PaymentYr
        {
            get
            {
                return this._paymentYr;
            }
            set
            {
                this._paymentYr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DigitBooleanType PriorYearDataInd
        {
            get
            {
                return this._priorYearDataInd;
            }
            set
            {
                this._priorYearDataInd = value;
                _shouldSerializePriorYearDataInd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=2)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{9}")]
        public string EIN
        {
            get
            {
                return this._eIN;
            }
            set
            {
                this._eIN = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TransmissionTypeCdType TransmissionTypeCd
        {
            get
            {
                return this._transmissionTypeCd;
            }
            set
            {
                this._transmissionTypeCd = value;
                _shouldSerializeTransmissionTypeCd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([TP])?")]
        public string TestFileCd
        {
            get
            {
                return this._testFileCd;
            }
            set
            {
                this._testFileCd = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(80)]
        public string OriginalReceiptId
        {
            get
            {
                return this._originalReceiptId;
            }
            set
            {
                this._originalReceiptId = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public DigitBooleanType TransmitterForeignEntityInd
        {
            get
            {
                return this._transmitterForeignEntityInd;
            }
            set
            {
                this._transmitterForeignEntityInd = value;
                _shouldSerializeTransmitterForeignEntityInd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public BusinessNameType TransmitterNameGrp
        {
            get
            {
                return this._transmitterNameGrp;
            }
            set
            {
                this._transmitterNameGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public CompanyInformationGrpType CompanyInformationGrp
        {
            get
            {
                return this._companyInformationGrp;
            }
            set
            {
                this._companyInformationGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public VendorInformationGrpType VendorInformationGrp
        {
            get
            {
                return this._vendorInformationGrp;
            }
            set
            {
                this._vendorInformationGrp = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger", Order=10)]
        public string TotalPayeeRecordCnt
        {
            get
            {
                return this._totalPayeeRecordCnt;
            }
            set
            {
                this._totalPayeeRecordCnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger", Order=11)]
        public string TotalPayerRecordCnt
        {
            get
            {
                return this._totalPayerRecordCnt;
            }
            set
            {
                this._totalPayerRecordCnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(10)]
        public string SoftwareId
        {
            get
            {
                return this._softwareId;
            }
            set
            {
                this._softwareId = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public FormNameType FormTypeCd
        {
            get
            {
                return this._formTypeCd;
            }
            set
            {
                this._formTypeCd = value;
                _shouldSerializeFormTypeCd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=14)]
        public BinaryFormatCodeType BinaryFormatCd
        {
            get
            {
                return this._binaryFormatCd;
            }
            set
            {
                this._binaryFormatCd = value;
                _shouldSerializeBinaryFormatCd = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", Order=15)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9A-Fa-f]{32}")]
        public string ChecksumAugmentationNum
        {
            get
            {
                return this._checksumAugmentationNum;
            }
            set
            {
                this._checksumAugmentationNum = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:us:gov:treasury:irs:common", DataType="integer", Order=16)]
        public string AttachmentByteSizeNum
        {
            get
            {
                return this._attachmentByteSizeNum;
            }
            set
            {
                this._attachmentByteSizeNum = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("1094[B|C]_Request_[B-DF-HJ-NP-TV-Z]{2}[B-DF-HJ-NP-TV-Z0-9]{3}_[1-9][0-9]{3}(0[1-9" +
            "]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[" +
            "0-9]|[1-5][0-9])[0-9]{3}Z\\.xml")]
        public string DocumentSystemFileNm
        {
            get
            {
                return this._documentSystemFileNm;
            }
            set
            {
                this._documentSystemFileNm = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xs" +
            "d", DataType="ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ACATrnsmtManifestReqDtlType));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether PriorYearDataInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializePriorYearDataInd()
        {
            if (_shouldSerializePriorYearDataInd)
            {
                return true;
            }
            return (_priorYearDataInd != default(DigitBooleanType));
        }
        
        /// <summary>
        /// Test whether TransmissionTypeCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTransmissionTypeCd()
        {
            if (_shouldSerializeTransmissionTypeCd)
            {
                return true;
            }
            return (_transmissionTypeCd != default(TransmissionTypeCdType));
        }
        
        /// <summary>
        /// Test whether TransmitterForeignEntityInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTransmitterForeignEntityInd()
        {
            if (_shouldSerializeTransmitterForeignEntityInd)
            {
                return true;
            }
            return (_transmitterForeignEntityInd != default(DigitBooleanType));
        }
        
        /// <summary>
        /// Test whether FormTypeCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFormTypeCd()
        {
            if (_shouldSerializeFormTypeCd)
            {
                return true;
            }
            return (_formTypeCd != default(FormNameType));
        }
        
        /// <summary>
        /// Test whether BinaryFormatCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBinaryFormatCd()
        {
            if (_shouldSerializeBinaryFormatCd)
            {
                return true;
            }
            return (_binaryFormatCd != default(BinaryFormatCodeType));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ACATrnsmtManifestReqDtlType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ACATrnsmtManifestReqDtlType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ACATrnsmtManifestReqDtlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ACATrnsmtManifestReqDtlType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACATrnsmtManifestReqDtlType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ACATrnsmtManifestReqDtlType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ACATrnsmtManifestReqDtlType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ACATrnsmtManifestReqDtlType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ACATrnsmtManifestReqDtlType Deserialize(System.IO.Stream s)
        {
            return ((ACATrnsmtManifestReqDtlType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ACATrnsmtManifestReqDtlType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ACATrnsmtManifestReqDtlType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ACATrnsmtManifestReqDtlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ACATrnsmtManifestReqDtlType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ACATrnsmtManifestReqDtlType);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ACATrnsmtManifestReqDtlType obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ACATrnsmtManifestReqDtlType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ACATrnsmtManifestReqDtlType LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }
        
        public static ACATrnsmtManifestReqDtlType LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Digit Boolean Type102015-07-14Initial VersionType for digit boolean values. 0= False, 1=True
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public enum DigitBooleanType
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    /// <summary>
    /// Transmission Type Code102015-01-15Initial versionTransmission Type Indicates whether Transmission has Original, Replacement or Corrected Records
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public enum TransmissionTypeCdType
    {
        
        O,
        
        C,
        
        R,
    }
    
    /// <summary>
    /// Form Name Type102014-11-03Initial versionForm Type 1094-1095B/C
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:ext:aca:air:7.0")]
    public enum FormNameType
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("1094/1095B")]
        Item10941095B,
        
        [System.Xml.Serialization.XmlEnumAttribute("1094/1095C")]
        Item10941095C,
    }
    
    /// <summary>
    /// Binary Format Code Type102012-09-05Initial versionA code for the file format of content type of a binary object. Extensible Markup Language (XML) is the only accepted type at this time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.2.0.15")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:us:gov:treasury:irs:common")]
    public enum BinaryFormatCodeType
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("application/xml")]
        applicationxml,
    }
}
#pragma warning restore
